
Project2_20223.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee4  08003ee4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee4  08003ee4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee4  08003ee4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08003f5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003f5c  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d999  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f67  00000000  00000000  0002da32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0002f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00030710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185c0  00000000  00000000  000313b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efe0  00000000  00000000  00049978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8c4  00000000  00000000  00058958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e821c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd8  00000000  00000000  000e826c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e5c 	.word	0x08003e5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003e5c 	.word	0x08003e5c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <Delay_us>:

/* USER CODE BEGIN PV */
uint16_t ADC_ScanVal[4];
// Delay
void Delay_us(uint16_t us)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0); // TIM1->CNT = 0
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <Delay_us+0x2c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000666:	bf00      	nop
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <Delay_us+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3f9      	bcc.n	8000668 <Delay_us+0x14>
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000108 	.word	0x20000108

08000684 <Delay_ms>:
void Delay_ms(uint16_t ms)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]
	while(ms)
 800068e:	e006      	b.n	800069e <Delay_ms+0x1a>
	{
		Delay_us(1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f7ff ffde 	bl	8000654 <Delay_us>
		ms--;
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	3b01      	subs	r3, #1
 800069c:	80fb      	strh	r3, [r7, #6]
	while(ms)
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f5      	bne.n	8000690 <Delay_ms+0xc>
	}
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <on_voice>:
void on_voice(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
 80006b4:	2140      	movs	r1, #64	; 0x40
 80006b6:	480c      	ldr	r0, [pc, #48]	; (80006e8 <on_voice+0x38>)
 80006b8:	f001 fe98 	bl	80023ec <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d10f      	bne.n	80006e2 <on_voice+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <on_voice+0x38>)
 80006ca:	f001 fea6 	bl	800241a <HAL_GPIO_WritePin>
		Delay_ms(2000);
 80006ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006d2:	f7ff ffd7 	bl	8000684 <Delay_ms>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <on_voice+0x38>)
 80006de:	f001 fe9c 	bl	800241a <HAL_GPIO_WritePin>
	}

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40010c00 	.word	0x40010c00

080006ec <UART_sendData>:

// UART
void UART_sendData(char* str)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	while(*str)
 80006f4:	e00d      	b.n	8000712 <UART_sendData+0x26>
	{
		while((USART1->SR & (1<<7)) == 0);
 80006f6:	bf00      	nop
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <UART_sendData+0x48>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f9      	beq.n	80006f8 <UART_sendData+0xc>
		USART1->DR = *str;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <UART_sendData+0x48>)
 800070a:	605a      	str	r2, [r3, #4]
		str++;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3301      	adds	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
	while(*str)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1ed      	bne.n	80006f6 <UART_sendData+0xa>
	}
	while((USART1->SR & (1<<6)) == 0);
 800071a:	bf00      	nop
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <UART_sendData+0x48>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f9      	beq.n	800071c <UART_sendData+0x30>
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40013800 	.word	0x40013800

08000738 <UART_sendFloat>:
void UART_sendFloat(float f)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	char str[9];
	int phanNguyen = (int)f;
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff61 	bl	8000608 <__aeabi_f2iz>
 8000746:	4603      	mov	r3, r0
 8000748:	61fb      	str	r3, [r7, #28]
	int phanThapPhan = (int)((f-phanNguyen)*100);
 800074a:	69f8      	ldr	r0, [r7, #28]
 800074c:	f7ff fdb8 	bl	80002c0 <__aeabi_i2f>
 8000750:	4603      	mov	r3, r0
 8000752:	4619      	mov	r1, r3
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff fcfd 	bl	8000154 <__aeabi_fsub>
 800075a:	4603      	mov	r3, r0
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <UART_sendFloat+0x58>)
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fe02 	bl	8000368 <__aeabi_fmul>
 8000764:	4603      	mov	r3, r0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff4e 	bl	8000608 <__aeabi_f2iz>
 800076c:	4603      	mov	r3, r0
 800076e:	61bb      	str	r3, [r7, #24]
	sprintf(str, "%d.%.2d", phanNguyen, phanThapPhan);
 8000770:	f107 000c 	add.w	r0, r7, #12
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	69fa      	ldr	r2, [r7, #28]
 8000778:	4906      	ldr	r1, [pc, #24]	; (8000794 <UART_sendFloat+0x5c>)
 800077a:	f002 fef5 	bl	8003568 <siprintf>
	UART_sendData(str);
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ffb2 	bl	80006ec <UART_sendData>
}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	42c80000 	.word	0x42c80000
 8000794:	08003e74 	.word	0x08003e74

08000798 <DHT22_Start>:

//DHT22
void DHT22_Start(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <DHT22_Start+0x44>)
 80007a2:	f001 fe3a 	bl	800241a <HAL_GPIO_WritePin>
	Delay_ms(20);
 80007a6:	2014      	movs	r0, #20
 80007a8:	f7ff ff6c 	bl	8000684 <Delay_ms>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2120      	movs	r1, #32
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <DHT22_Start+0x44>)
 80007b2:	f001 fe32 	bl	800241a <HAL_GPIO_WritePin>
	TIM1->CNT = 0;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <DHT22_Start+0x48>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM1->CNT < 55)
 80007bc:	e006      	b.n	80007cc <DHT22_Start+0x34>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0)
 80007be:	2120      	movs	r1, #32
 80007c0:	4806      	ldr	r0, [pc, #24]	; (80007dc <DHT22_Start+0x44>)
 80007c2:	f001 fe13 	bl	80023ec <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d004      	beq.n	80007d6 <DHT22_Start+0x3e>
	while(TIM1->CNT < 55)
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <DHT22_Start+0x48>)
 80007ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d0:	2b36      	cmp	r3, #54	; 0x36
 80007d2:	d9f4      	bls.n	80007be <DHT22_Start+0x26>
			break;
	}
}
 80007d4:	e000      	b.n	80007d8 <DHT22_Start+0x40>
			break;
 80007d6:	bf00      	nop
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	40012c00 	.word	0x40012c00

080007e4 <DHT22_checkResponse>:

uint8_t DHT22_checkResponse(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	uint8_t res = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	71fb      	strb	r3, [r7, #7]
	TIM1->CNT = 0;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <DHT22_checkResponse+0x70>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM1->CNT < 90)
 80007f4:	e00e      	b.n	8000814 <DHT22_checkResponse+0x30>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) && (TIM1->CNT > 70))
 80007f6:	2120      	movs	r1, #32
 80007f8:	4817      	ldr	r0, [pc, #92]	; (8000858 <DHT22_checkResponse+0x74>)
 80007fa:	f001 fdf7 	bl	80023ec <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d007      	beq.n	8000814 <DHT22_checkResponse+0x30>
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <DHT22_checkResponse+0x70>)
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000808:	2b46      	cmp	r3, #70	; 0x46
 800080a:	d903      	bls.n	8000814 <DHT22_checkResponse+0x30>
		{
			res++;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	3301      	adds	r3, #1
 8000810:	71fb      	strb	r3, [r7, #7]
			break;
 8000812:	e003      	b.n	800081c <DHT22_checkResponse+0x38>
	while(TIM1->CNT < 90)
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <DHT22_checkResponse+0x70>)
 8000816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000818:	2b59      	cmp	r3, #89	; 0x59
 800081a:	d9ec      	bls.n	80007f6 <DHT22_checkResponse+0x12>
		}
	}

	TIM1->CNT = 0;
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <DHT22_checkResponse+0x70>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM1->CNT <95)
 8000822:	e00e      	b.n	8000842 <DHT22_checkResponse+0x5e>
	{
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) && (TIM1->CNT > 70))
 8000824:	2120      	movs	r1, #32
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <DHT22_checkResponse+0x74>)
 8000828:	f001 fde0 	bl	80023ec <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d107      	bne.n	8000842 <DHT22_checkResponse+0x5e>
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <DHT22_checkResponse+0x70>)
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	2b46      	cmp	r3, #70	; 0x46
 8000838:	d903      	bls.n	8000842 <DHT22_checkResponse+0x5e>
		{
			res++;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	3301      	adds	r3, #1
 800083e:	71fb      	strb	r3, [r7, #7]
			break;
 8000840:	e003      	b.n	800084a <DHT22_checkResponse+0x66>
	while(TIM1->CNT <95)
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <DHT22_checkResponse+0x70>)
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	2b5e      	cmp	r3, #94	; 0x5e
 8000848:	d9ec      	bls.n	8000824 <DHT22_checkResponse+0x40>
		}
	}
	return res;
 800084a:	79fb      	ldrb	r3, [r7, #7]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40012c00 	.word	0x40012c00
 8000858:	40010c00 	.word	0x40010c00

0800085c <DHT22_readData>:

void DHT22_readData(float *temp, float *hum)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	uint8_t data[5];
	uint8_t htim;
	DHT22_Start();
 8000866:	f7ff ff97 	bl	8000798 <DHT22_Start>
	uint8_t check = DHT22_checkResponse();
 800086a:	f7ff ffbb 	bl	80007e4 <DHT22_checkResponse>
 800086e:	4603      	mov	r3, r0
 8000870:	73fb      	strb	r3, [r7, #15]
	if(check == 2)
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d168      	bne.n	800094a <DHT22_readData+0xee>
	{
		for(int i=0; i<5; i++)
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	e062      	b.n	8000944 <DHT22_readData+0xe8>
		{
			for(int j=7; j>=0; j--)
 800087e:	2307      	movs	r3, #7
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	e059      	b.n	8000938 <DHT22_readData+0xdc>
			{
				TIM1->CNT = 0;
 8000884:	4b52      	ldr	r3, [pc, #328]	; (80009d0 <DHT22_readData+0x174>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
					while(TIM1->CNT < 60)
 800088a:	e00a      	b.n	80008a2 <DHT22_readData+0x46>
					{
						if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) && (TIM1->CNT > 40))
 800088c:	2120      	movs	r1, #32
 800088e:	4851      	ldr	r0, [pc, #324]	; (80009d4 <DHT22_readData+0x178>)
 8000890:	f001 fdac 	bl	80023ec <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d003      	beq.n	80008a2 <DHT22_readData+0x46>
 800089a:	4b4d      	ldr	r3, [pc, #308]	; (80009d0 <DHT22_readData+0x174>)
 800089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089e:	2b28      	cmp	r3, #40	; 0x28
 80008a0:	d804      	bhi.n	80008ac <DHT22_readData+0x50>
					while(TIM1->CNT < 60)
 80008a2:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <DHT22_readData+0x174>)
 80008a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a6:	2b3b      	cmp	r3, #59	; 0x3b
 80008a8:	d9f0      	bls.n	800088c <DHT22_readData+0x30>
 80008aa:	e000      	b.n	80008ae <DHT22_readData+0x52>
						{
							break;
 80008ac:	bf00      	nop
						}
					}

					TIM1->CNT = 0;
 80008ae:	4b48      	ldr	r3, [pc, #288]	; (80009d0 <DHT22_readData+0x174>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
					while(TIM1->CNT < 80)
 80008b4:	e006      	b.n	80008c4 <DHT22_readData+0x68>
					{
						if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 80008b6:	2120      	movs	r1, #32
 80008b8:	4846      	ldr	r0, [pc, #280]	; (80009d4 <DHT22_readData+0x178>)
 80008ba:	f001 fd97 	bl	80023ec <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d004      	beq.n	80008ce <DHT22_readData+0x72>
					while(TIM1->CNT < 80)
 80008c4:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <DHT22_readData+0x174>)
 80008c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c8:	2b4f      	cmp	r3, #79	; 0x4f
 80008ca:	d9f4      	bls.n	80008b6 <DHT22_readData+0x5a>
 80008cc:	e000      	b.n	80008d0 <DHT22_readData+0x74>
						{
							break;
 80008ce:	bf00      	nop
						}
					}
					htim = TIM1->CNT;
 80008d0:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <DHT22_readData+0x174>)
 80008d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d4:	73bb      	strb	r3, [r7, #14]
					if(htim > 50)
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	2b32      	cmp	r3, #50	; 0x32
 80008da:	d914      	bls.n	8000906 <DHT22_readData+0xaa>
					{
						data[i] |= (1<<j);
 80008dc:	f107 0208 	add.w	r2, r7, #8
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	4413      	add	r3, r2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	2101      	movs	r1, #1
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	b2d9      	uxtb	r1, r3
 80008f8:	f107 0208 	add.w	r2, r7, #8
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	4413      	add	r3, r2
 8000900:	460a      	mov	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e015      	b.n	8000932 <DHT22_readData+0xd6>
					}
					else
						data[i] &= ~(1<<j);
 8000906:	f107 0208 	add.w	r2, r7, #8
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b25a      	sxtb	r2, r3
 8000912:	2101      	movs	r1, #1
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	b25b      	sxtb	r3, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4013      	ands	r3, r2
 8000922:	b25b      	sxtb	r3, r3
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	f107 0208 	add.w	r2, r7, #8
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	4413      	add	r3, r2
 800092e:	460a      	mov	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
			for(int j=7; j>=0; j--)
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3b01      	subs	r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	2b00      	cmp	r3, #0
 800093c:	daa2      	bge.n	8000884 <DHT22_readData+0x28>
		for(int i=0; i<5; i++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	2b04      	cmp	r3, #4
 8000948:	dd99      	ble.n	800087e <DHT22_readData+0x22>
			}
		}

	}

	*temp = ((float)(data[2]&0x7F)*256 + (float)data[3])/10.0;
 800094a:	7abb      	ldrb	r3, [r7, #10]
 800094c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fcb5 	bl	80002c0 <__aeabi_i2f>
 8000956:	4603      	mov	r3, r0
 8000958:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fd03 	bl	8000368 <__aeabi_fmul>
 8000962:	4603      	mov	r3, r0
 8000964:	461c      	mov	r4, r3
 8000966:	7afb      	ldrb	r3, [r7, #11]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fca5 	bl	80002b8 <__aeabi_ui2f>
 800096e:	4603      	mov	r3, r0
 8000970:	4619      	mov	r1, r3
 8000972:	4620      	mov	r0, r4
 8000974:	f7ff fbf0 	bl	8000158 <__addsf3>
 8000978:	4603      	mov	r3, r0
 800097a:	4917      	ldr	r1, [pc, #92]	; (80009d8 <DHT22_readData+0x17c>)
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fda7 	bl	80004d0 <__aeabi_fdiv>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	601a      	str	r2, [r3, #0]
	*hum = ((float)data[0]*256 + (float)data[1])/10.0;
 800098a:	7a3b      	ldrb	r3, [r7, #8]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc93 	bl	80002b8 <__aeabi_ui2f>
 8000992:	4603      	mov	r3, r0
 8000994:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fce5 	bl	8000368 <__aeabi_fmul>
 800099e:	4603      	mov	r3, r0
 80009a0:	461c      	mov	r4, r3
 80009a2:	7a7b      	ldrb	r3, [r7, #9]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc87 	bl	80002b8 <__aeabi_ui2f>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4620      	mov	r0, r4
 80009b0:	f7ff fbd2 	bl	8000158 <__addsf3>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <DHT22_readData+0x17c>)
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fd89 	bl	80004d0 <__aeabi_fdiv>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	601a      	str	r2, [r3, #0]

}
 80009c6:	bf00      	nop
 80009c8:	371c      	adds	r7, #28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	41200000 	.word	0x41200000

080009dc <warning>:

void warning(uint16_t *ADC_ScanVal1, float temp, float hum, int *check)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	603b      	str	r3, [r7, #0]
	if(ADC_ScanVal1[0] > 1500  || ADC_ScanVal1[1] < 200 || ADC_ScanVal1[2] < 200 || ADC_ScanVal1[3] > 1500)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d810      	bhi.n	8000a18 <warning+0x3c>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3302      	adds	r3, #2
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2bc7      	cmp	r3, #199	; 0xc7
 80009fe:	d90b      	bls.n	8000a18 <warning+0x3c>
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3304      	adds	r3, #4
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2bc7      	cmp	r3, #199	; 0xc7
 8000a08:	d906      	bls.n	8000a18 <warning+0x3c>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3306      	adds	r3, #6
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d922      	bls.n	8000a5e <warning+0x82>
	{
		*check = 1;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a24:	481d      	ldr	r0, [pc, #116]	; (8000a9c <warning+0xc0>)
 8000a26:	f001 fcf8 	bl	800241a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a30:	481a      	ldr	r0, [pc, #104]	; (8000a9c <warning+0xc0>)
 8000a32:	f001 fcf2 	bl	800241a <HAL_GPIO_WritePin>
		UART_sendFloat(1);
 8000a36:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000a3a:	f7ff fe7d 	bl	8000738 <UART_sendFloat>
		UART_sendData(",");
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <warning+0xc4>)
 8000a40:	f7ff fe54 	bl	80006ec <UART_sendData>
		UART_sendFloat(temp);
 8000a44:	68b8      	ldr	r0, [r7, #8]
 8000a46:	f7ff fe77 	bl	8000738 <UART_sendFloat>
		UART_sendData(",");
 8000a4a:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <warning+0xc4>)
 8000a4c:	f7ff fe4e 	bl	80006ec <UART_sendData>
		UART_sendFloat(hum);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fe71 	bl	8000738 <UART_sendFloat>
		UART_sendData("\n");
 8000a56:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <warning+0xc8>)
 8000a58:	f7ff fe48 	bl	80006ec <UART_sendData>
 8000a5c:	e019      	b.n	8000a92 <warning+0xb6>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <warning+0xc0>)
 8000a66:	f001 fcd8 	bl	800241a <HAL_GPIO_WritePin>
		UART_sendFloat(0);
 8000a6a:	f04f 0000 	mov.w	r0, #0
 8000a6e:	f7ff fe63 	bl	8000738 <UART_sendFloat>
		UART_sendData(",");
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <warning+0xc4>)
 8000a74:	f7ff fe3a 	bl	80006ec <UART_sendData>
		UART_sendFloat(temp);
 8000a78:	68b8      	ldr	r0, [r7, #8]
 8000a7a:	f7ff fe5d 	bl	8000738 <UART_sendFloat>
		UART_sendData(",");
 8000a7e:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <warning+0xc4>)
 8000a80:	f7ff fe34 	bl	80006ec <UART_sendData>
		UART_sendFloat(hum);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fe57 	bl	8000738 <UART_sendFloat>
		UART_sendData("\n");
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <warning+0xc8>)
 8000a8c:	f7ff fe2e 	bl	80006ec <UART_sendData>
	}
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40010c00 	.word	0x40010c00
 8000aa0:	08003e7c 	.word	0x08003e7c
 8000aa4:	08003e80 	.word	0x08003e80

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float temp=0, hum=0;
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aba:	f000 fbc5 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abe:	f000 f86d 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac2:	f000 f9c9 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ac6:	f000 f9a9 	bl	8000e1c <MX_DMA_Init>
  MX_ADC1_Init();
 8000aca:	f000 f8c3 	bl	8000c54 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ace:	f000 f92b 	bl	8000d28 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000ad2:	f000 f979 	bl	8000dc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000ad6:	482a      	ldr	r0, [pc, #168]	; (8000b80 <main+0xd8>)
 8000ad8:	f002 f9ce 	bl	8002e78 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_ScanVal, 4);
 8000adc:	2204      	movs	r2, #4
 8000ade:	4929      	ldr	r1, [pc, #164]	; (8000b84 <main+0xdc>)
 8000ae0:	4829      	ldr	r0, [pc, #164]	; (8000b88 <main+0xe0>)
 8000ae2:	f000 fd0f 	bl	8001504 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2120      	movs	r1, #32
 8000aea:	4828      	ldr	r0, [pc, #160]	; (8000b8c <main+0xe4>)
 8000aec:	f001 fc95 	bl	800241a <HAL_GPIO_WritePin>
  /* USER CODE END 2 */
  JUM:
  checkFire = 0;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <main+0xe8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  on_voice();
 8000af6:	f7ff fddb 	bl	80006b0 <on_voice>
	  DHT22_readData(&temp, &hum);
 8000afa:	463a      	mov	r2, r7
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff feab 	bl	800085c <DHT22_readData>
	  warning((uint16_t*)ADC_ScanVal, temp, hum, &checkFire);
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <main+0xe8>)
 8000b0c:	481d      	ldr	r0, [pc, #116]	; (8000b84 <main+0xdc>)
 8000b0e:	f7ff ff65 	bl	80009dc <warning>
	  UART_sendFloat(temp);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe0f 	bl	8000738 <UART_sendFloat>
	  UART_sendData("\n");
 8000b1a:	481e      	ldr	r0, [pc, #120]	; (8000b94 <main+0xec>)
 8000b1c:	f7ff fde6 	bl	80006ec <UART_sendData>
//	  Delay_ms(1000);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
//	  HAL_Delay(1000);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
	  HAL_Delay(1000);
 8000b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b24:	f000 fbf2 	bl	800130c <HAL_Delay>
	  if(checkFire == 1)
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <main+0xe8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d104      	bne.n	8000b3a <main+0x92>
		  x++;
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <main+0xf0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <main+0xf0>)
 8000b38:	6013      	str	r3, [r2, #0]
	  if(x > 10 && ADC_ScanVal[0] < 1500 &&  ADC_ScanVal[1] > 200 && ADC_ScanVal[2] > 200 && ADC_ScanVal[3] < 1500 ){
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <main+0xf0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b0a      	cmp	r3, #10
 8000b40:	ddd9      	ble.n	8000af6 <main+0x4e>
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <main+0xdc>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d8d3      	bhi.n	8000af6 <main+0x4e>
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <main+0xdc>)
 8000b50:	885b      	ldrh	r3, [r3, #2]
 8000b52:	2bc8      	cmp	r3, #200	; 0xc8
 8000b54:	d9cf      	bls.n	8000af6 <main+0x4e>
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <main+0xdc>)
 8000b58:	889b      	ldrh	r3, [r3, #4]
 8000b5a:	2bc8      	cmp	r3, #200	; 0xc8
 8000b5c:	d9cb      	bls.n	8000af6 <main+0x4e>
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <main+0xdc>)
 8000b60:	88db      	ldrh	r3, [r3, #6]
 8000b62:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d8c5      	bhi.n	8000af6 <main+0x4e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b70:	4806      	ldr	r0, [pc, #24]	; (8000b8c <main+0xe4>)
 8000b72:	f001 fc52 	bl	800241a <HAL_GPIO_WritePin>
		  x=0;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <main+0xf0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
		  goto JUM;
 8000b7c:	e7b8      	b.n	8000af0 <main+0x48>
 8000b7e:	bf00      	nop
 8000b80:	20000108 	.word	0x20000108
 8000b84:	20000198 	.word	0x20000198
 8000b88:	20000094 	.word	0x20000094
 8000b8c:	40010c00 	.word	0x40010c00
 8000b90:	2000008c 	.word	0x2000008c
 8000b94:	08003e80 	.word	0x08003e80
 8000b98:	20000090 	.word	0x20000090

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	; 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba6:	2228      	movs	r2, #40	; 0x28
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fcd4 	bl	8003558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bde:	2302      	movs	r3, #2
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fc2a 	bl	800244c <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bfe:	f000 f985 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fe96 	bl	8002950 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c2a:	f000 f96f 	bl	8000f0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 f816 	bl	8002c6c <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c46:	f000 f961 	bl	8000f0c <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3750      	adds	r7, #80	; 0x50
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c64:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000c66:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <MX_ADC1_Init+0xd0>)
 8000c68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c72:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000c80:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c92:	4823      	ldr	r0, [pc, #140]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000c94:	f000 fb5e 	bl	8001354 <HAL_ADC_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c9e:	f000 f935 	bl	8000f0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000caa:	2306      	movs	r3, #6
 8000cac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	481b      	ldr	r0, [pc, #108]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000cb4:	f000 fd20 	bl	80016f8 <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 f925 	bl	8000f0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4814      	ldr	r0, [pc, #80]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000cd0:	f000 fd12 	bl	80016f8 <HAL_ADC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000cda:	f000 f917 	bl	8000f0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000cec:	f000 fd04 	bl	80016f8 <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cf6:	f000 f909 	bl	8000f0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_ADC1_Init+0xcc>)
 8000d08:	f000 fcf6 	bl	80016f8 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000d12:	f000 f8fb 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000094 	.word	0x20000094
 8000d24:	40012400 	.word	0x40012400

08000d28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000d46:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <MX_TIM1_Init+0x9c>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000d4c:	2247      	movs	r2, #71	; 0x47
 8000d4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000d72:	f002 f831 	bl	8002dd8 <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d7c:	f000 f8c6 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000d8e:	f002 f8bd 	bl	8002f0c <HAL_TIM_ConfigClockSource>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d98:	f000 f8b8 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_TIM1_Init+0x98>)
 8000daa:	f002 fa6f 	bl	800328c <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000db4:	f000 f8aa 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000108 	.word	0x20000108
 8000dc4:	40012c00 	.word	0x40012c00

08000dc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <MX_USART1_UART_Init+0x50>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000e00:	f002 faa2 	bl	8003348 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e0a:	f000 f87f 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000150 	.word	0x20000150
 8000e18:	40013800 	.word	0x40013800

08000e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_DMA_Init+0x38>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <MX_DMA_Init+0x38>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6153      	str	r3, [r2, #20]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_DMA_Init+0x38>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	200b      	movs	r0, #11
 8000e40:	f000 ff2b 	bl	8001c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e44:	200b      	movs	r0, #11
 8000e46:	f000 ff44 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_GPIO_Init+0xac>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a24      	ldr	r2, [pc, #144]	; (8000f04 <MX_GPIO_Init+0xac>)
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_GPIO_Init+0xac>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0320 	and.w	r3, r3, #32
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_GPIO_Init+0xac>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <MX_GPIO_Init+0xac>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_GPIO_Init+0xac>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_GPIO_Init+0xac>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <MX_GPIO_Init+0xac>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_GPIO_Init+0xac>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5|GPIO_PIN_14, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f247 0120 	movw	r1, #28704	; 0x7020
 8000eba:	4813      	ldr	r0, [pc, #76]	; (8000f08 <MX_GPIO_Init+0xb0>)
 8000ebc:	f001 faad 	bl	800241a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000ec0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <MX_GPIO_Init+0xb0>)
 8000eda:	f001 f903 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ede:	2320      	movs	r3, #32
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ee2:	2311      	movs	r3, #17
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_GPIO_Init+0xb0>)
 8000ef6:	f001 f8f5 	bl	80020e4 <HAL_GPIO_Init>

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>
	...

08000f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_MspInit+0x60>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_MspInit+0x60>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000

08000f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a28      	ldr	r2, [pc, #160]	; (8001038 <HAL_ADC_MspInit+0xbc>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d149      	bne.n	8001030 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <HAL_ADC_MspInit+0xc0>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <HAL_ADC_MspInit+0xc0>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_ADC_MspInit+0xc0>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_ADC_MspInit+0xc0>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a20      	ldr	r2, [pc, #128]	; (800103c <HAL_ADC_MspInit+0xc0>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <HAL_ADC_MspInit+0xc0>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fcc:	2378      	movs	r3, #120	; 0x78
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4819      	ldr	r0, [pc, #100]	; (8001040 <HAL_ADC_MspInit+0xc4>)
 8000fdc:	f001 f882 	bl	80020e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_ADC_MspInit+0xcc>)
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 8000ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 800100a:	2220      	movs	r2, #32
 800100c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 8001016:	f000 fe77 	bl	8001d08 <HAL_DMA_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001020:	f7ff ff74 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_ADC_MspInit+0xc8>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40012400 	.word	0x40012400
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800
 8001044:	200000c4 	.word	0x200000c4
 8001048:	40020008 	.word	0x40020008

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a09      	ldr	r2, [pc, #36]	; (8001080 <HAL_TIM_Base_MspInit+0x34>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10b      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_TIM_Base_MspInit+0x38>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_TIM_Base_MspInit+0x38>)
 8001064:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_TIM_Base_MspInit+0x38>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40012c00 	.word	0x40012c00
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_UART_MspInit+0x8c>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d131      	bne.n	800110c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HAL_UART_MspInit+0x90>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_UART_MspInit+0x90>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_UART_MspInit+0x90>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_UART_MspInit+0x90>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_UART_MspInit+0x90>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_UART_MspInit+0x90>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <HAL_UART_MspInit+0x94>)
 80010ee:	f000 fff9 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_UART_MspInit+0x94>)
 8001108:	f000 ffec 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40013800 	.word	0x40013800
 8001118:	40021000 	.word	0x40021000
 800111c:	40010800 	.word	0x40010800

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001166:	f000 f8b5 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <DMA1_Channel1_IRQHandler+0x10>)
 8001176:	f000 fe81 	bl	8001e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000c4 	.word	0x200000c4

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f002 f9a6 	bl	8003504 <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	220c      	movs	r2, #12
 80011bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_sbrk+0x64>)
 80011d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20005000 	.word	0x20005000
 80011e4:	00000400 	.word	0x00000400
 80011e8:	200001a0 	.word	0x200001a0
 80011ec:	200001b8 	.word	0x200001b8

080011f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011fc:	f7ff fff8 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001202:	490c      	ldr	r1, [pc, #48]	; (8001234 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001218:	4c09      	ldr	r4, [pc, #36]	; (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f002 f973 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122a:	f7ff fc3d 	bl	8000aa8 <main>
  bx lr
 800122e:	4770      	bx	lr
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001238:	08003eec 	.word	0x08003eec
  ldr r2, =_sbss
 800123c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001240:	200001b8 	.word	0x200001b8

08001244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_2_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_Init+0x28>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_Init+0x28>)
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 fd13 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	200f      	movs	r0, #15
 8001260:	f000 f808 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fe58 	bl	8000f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40022000 	.word	0x40022000

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fd2b 	bl	8001cee <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 fcf3 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000004 	.word	0x20000004

080012d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x1c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_IncTick+0x20>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a03      	ldr	r2, [pc, #12]	; (80012f4 <HAL_IncTick+0x20>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000008 	.word	0x20000008
 80012f4:	200001a4 	.word	0x200001a4

080012f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b02      	ldr	r3, [pc, #8]	; (8001308 <HAL_GetTick+0x10>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	200001a4 	.word	0x200001a4

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff fff0 	bl	80012f8 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffe0 	bl	80012f8 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008

08001354 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0be      	b.n	80014f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	2b00      	cmp	r3, #0
 8001382:	d109      	bne.n	8001398 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fdf2 	bl	8000f7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 faff 	bl	800199c <ADC_ConversionStop_Disable>
 800139e:	4603      	mov	r3, r0
 80013a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 8099 	bne.w	80014e2 <HAL_ADC_Init+0x18e>
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f040 8095 	bne.w	80014e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013c0:	f023 0302 	bic.w	r3, r3, #2
 80013c4:	f043 0202 	orr.w	r2, r3, #2
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7b1b      	ldrb	r3, [r3, #12]
 80013da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013ec:	d003      	beq.n	80013f6 <HAL_ADC_Init+0xa2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d102      	bne.n	80013fc <HAL_ADC_Init+0xa8>
 80013f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fa:	e000      	b.n	80013fe <HAL_ADC_Init+0xaa>
 80013fc:	2300      	movs	r3, #0
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7d1b      	ldrb	r3, [r3, #20]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d119      	bne.n	8001440 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7b1b      	ldrb	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	3b01      	subs	r3, #1
 800141a:	035a      	lsls	r2, r3, #13
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	e00b      	b.n	8001440 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	f043 0220 	orr.w	r2, r3, #32
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	f043 0201 	orr.w	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	430a      	orrs	r2, r1
 8001452:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_ADC_Init+0x1a8>)
 800145c:	4013      	ands	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	430b      	orrs	r3, r1
 8001466:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001470:	d003      	beq.n	800147a <HAL_ADC_Init+0x126>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d104      	bne.n	8001484 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	3b01      	subs	r3, #1
 8001480:	051b      	lsls	r3, r3, #20
 8001482:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	430a      	orrs	r2, r1
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_ADC_Init+0x1ac>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d10b      	bne.n	80014c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014be:	e018      	b.n	80014f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f023 0312 	bic.w	r3, r3, #18
 80014c8:	f043 0210 	orr.w	r2, r3, #16
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014e0:	e007      	b.n	80014f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	f043 0210 	orr.w	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001500:	ff1f0efe 	.word	0xff1f0efe

08001504 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a64      	ldr	r2, [pc, #400]	; (80016ac <HAL_ADC_Start_DMA+0x1a8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d004      	beq.n	8001528 <HAL_ADC_Start_DMA+0x24>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a63      	ldr	r2, [pc, #396]	; (80016b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d106      	bne.n	8001536 <HAL_ADC_Start_DMA+0x32>
 8001528:	4b60      	ldr	r3, [pc, #384]	; (80016ac <HAL_ADC_Start_DMA+0x1a8>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001530:	2b00      	cmp	r3, #0
 8001532:	f040 80b3 	bne.w	800169c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_ADC_Start_DMA+0x40>
 8001540:	2302      	movs	r3, #2
 8001542:	e0ae      	b.n	80016a2 <HAL_ADC_Start_DMA+0x19e>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f9cb 	bl	80018e8 <ADC_Enable>
 8001552:	4603      	mov	r3, r0
 8001554:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f040 809a 	bne.w	8001692 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d105      	bne.n	8001588 <HAL_ADC_Start_DMA+0x84>
 800157c:	4b4b      	ldr	r3, [pc, #300]	; (80016ac <HAL_ADC_Start_DMA+0x1a8>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d115      	bne.n	80015b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d026      	beq.n	80015f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015b2:	e01d      	b.n	80015f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a39      	ldr	r2, [pc, #228]	; (80016ac <HAL_ADC_Start_DMA+0x1a8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d004      	beq.n	80015d4 <HAL_ADC_Start_DMA+0xd0>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <HAL_ADC_Start_DMA+0x1ac>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d10d      	bne.n	80015f0 <HAL_ADC_Start_DMA+0xec>
 80015d4:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_ADC_Start_DMA+0x1a8>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	f023 0206 	bic.w	r2, r3, #6
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
 8001608:	e002      	b.n	8001610 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a25      	ldr	r2, [pc, #148]	; (80016b4 <HAL_ADC_Start_DMA+0x1b0>)
 800161e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a24      	ldr	r2, [pc, #144]	; (80016b8 <HAL_ADC_Start_DMA+0x1b4>)
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_ADC_Start_DMA+0x1b8>)
 800162e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f06f 0202 	mvn.w	r2, #2
 8001638:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001648:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a18      	ldr	r0, [r3, #32]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	334c      	adds	r3, #76	; 0x4c
 8001654:	4619      	mov	r1, r3
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f000 fbaf 	bl	8001dbc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001668:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800166c:	d108      	bne.n	8001680 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800167c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800167e:	e00f      	b.n	80016a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800168e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001690:	e006      	b.n	80016a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800169a:	e001      	b.n	80016a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40012400 	.word	0x40012400
 80016b0:	40012800 	.word	0x40012800
 80016b4:	08001a1f 	.word	0x08001a1f
 80016b8:	08001a9b 	.word	0x08001a9b
 80016bc:	08001ab7 	.word	0x08001ab7

080016c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x20>
 8001714:	2302      	movs	r3, #2
 8001716:	e0dc      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x1da>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b06      	cmp	r3, #6
 8001726:	d81c      	bhi.n	8001762 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3b05      	subs	r3, #5
 800173a:	221f      	movs	r2, #31
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	4019      	ands	r1, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3b05      	subs	r3, #5
 8001754:	fa00 f203 	lsl.w	r2, r0, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
 8001760:	e03c      	b.n	80017dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d81c      	bhi.n	80017a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b23      	subs	r3, #35	; 0x23
 800177c:	221f      	movs	r2, #31
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	4019      	ands	r1, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	3b23      	subs	r3, #35	; 0x23
 8001796:	fa00 f203 	lsl.w	r2, r0, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
 80017a2:	e01b      	b.n	80017dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3b41      	subs	r3, #65	; 0x41
 80017b6:	221f      	movs	r2, #31
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	4019      	ands	r1, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	3b41      	subs	r3, #65	; 0x41
 80017d0:	fa00 f203 	lsl.w	r2, r0, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b09      	cmp	r3, #9
 80017e2:	d91c      	bls.n	800181e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68d9      	ldr	r1, [r3, #12]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	3b1e      	subs	r3, #30
 80017f6:	2207      	movs	r2, #7
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4019      	ands	r1, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6898      	ldr	r0, [r3, #8]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	3b1e      	subs	r3, #30
 8001810:	fa00 f203 	lsl.w	r2, r0, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	e019      	b.n	8001852 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6919      	ldr	r1, [r3, #16]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	2207      	movs	r2, #7
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	4019      	ands	r1, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6898      	ldr	r0, [r3, #8]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	fa00 f203 	lsl.w	r2, r0, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b10      	cmp	r3, #16
 8001858:	d003      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800185e:	2b11      	cmp	r3, #17
 8001860:	d132      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_ADC_ConfigChannel+0x1e4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d125      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d126      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001888:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b10      	cmp	r3, #16
 8001890:	d11a      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	0c9a      	lsrs	r2, r3, #18
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x1b2>
 80018b6:	e007      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	f043 0220 	orr.w	r2, r3, #32
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40012400 	.word	0x40012400
 80018e0:	20000000 	.word	0x20000000
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b01      	cmp	r3, #1
 8001904:	d040      	beq.n	8001988 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0201 	orr.w	r2, r2, #1
 8001914:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <ADC_Enable+0xac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <ADC_Enable+0xb0>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	0c9b      	lsrs	r3, r3, #18
 8001922:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001924:	e002      	b.n	800192c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3b01      	subs	r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f9      	bne.n	8001926 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001932:	f7ff fce1 	bl	80012f8 <HAL_GetTick>
 8001936:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001938:	e01f      	b.n	800197a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800193a:	f7ff fcdd 	bl	80012f8 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d918      	bls.n	800197a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b01      	cmp	r3, #1
 8001954:	d011      	beq.n	800197a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	f043 0210 	orr.w	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e007      	b.n	800198a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d1d8      	bne.n	800193a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000000 	.word	0x20000000
 8001998:	431bde83 	.word	0x431bde83

0800199c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d12e      	bne.n	8001a14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019c6:	f7ff fc97 	bl	80012f8 <HAL_GetTick>
 80019ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019cc:	e01b      	b.n	8001a06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019ce:	f7ff fc93 	bl	80012f8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d914      	bls.n	8001a06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d10d      	bne.n	8001a06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f043 0210 	orr.w	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e007      	b.n	8001a16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d0dc      	beq.n	80019ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d127      	bne.n	8001a88 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a52:	d115      	bne.n	8001a80 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d111      	bne.n	8001a80 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7ff fe1d 	bl	80016c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a86:	e004      	b.n	8001a92 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff fe12 	bl	80016d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	f043 0204 	orr.w	r2, r3, #4
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f7ff fe01 	bl	80016e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <__NVIC_EnableIRQ+0x34>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff90 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff2d 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff42 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff90 	bl	8001bdc <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5f 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff35 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e043      	b.n	8001da6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_DMA_Init+0xa8>)
 8001d26:	4413      	add	r3, r2
 8001d28:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <HAL_DMA_Init+0xac>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	009a      	lsls	r2, r3, #2
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_DMA_Init+0xb0>)
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	bffdfff8 	.word	0xbffdfff8
 8001db4:	cccccccd 	.word	0xcccccccd
 8001db8:	40020000 	.word	0x40020000

08001dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_DMA_Start_IT+0x20>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e04b      	b.n	8001e74 <HAL_DMA_Start_IT+0xb8>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d13a      	bne.n	8001e66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f937 	bl	8002088 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 020e 	orr.w	r2, r2, #14
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e00f      	b.n	8001e54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 020a 	orr.w	r2, r2, #10
 8001e52:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e005      	b.n	8001e72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2204      	movs	r2, #4
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d04f      	beq.n	8001f44 <HAL_DMA_IRQHandler+0xc8>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d04a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0204 	bic.w	r2, r2, #4
 8001eca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a66      	ldr	r2, [pc, #408]	; (800206c <HAL_DMA_IRQHandler+0x1f0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d029      	beq.n	8001f2a <HAL_DMA_IRQHandler+0xae>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a65      	ldr	r2, [pc, #404]	; (8002070 <HAL_DMA_IRQHandler+0x1f4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d022      	beq.n	8001f26 <HAL_DMA_IRQHandler+0xaa>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a63      	ldr	r2, [pc, #396]	; (8002074 <HAL_DMA_IRQHandler+0x1f8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01a      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xa4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a62      	ldr	r2, [pc, #392]	; (8002078 <HAL_DMA_IRQHandler+0x1fc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d012      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x9e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a60      	ldr	r2, [pc, #384]	; (800207c <HAL_DMA_IRQHandler+0x200>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00a      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x98>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5f      	ldr	r2, [pc, #380]	; (8002080 <HAL_DMA_IRQHandler+0x204>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d102      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x92>
 8001f08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f0c:	e00e      	b.n	8001f2c <HAL_DMA_IRQHandler+0xb0>
 8001f0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f12:	e00b      	b.n	8001f2c <HAL_DMA_IRQHandler+0xb0>
 8001f14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f18:	e008      	b.n	8001f2c <HAL_DMA_IRQHandler+0xb0>
 8001f1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f1e:	e005      	b.n	8001f2c <HAL_DMA_IRQHandler+0xb0>
 8001f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f24:	e002      	b.n	8001f2c <HAL_DMA_IRQHandler+0xb0>
 8001f26:	2340      	movs	r3, #64	; 0x40
 8001f28:	e000      	b.n	8001f2c <HAL_DMA_IRQHandler+0xb0>
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	4a55      	ldr	r2, [pc, #340]	; (8002084 <HAL_DMA_IRQHandler+0x208>)
 8001f2e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 8094 	beq.w	8002062 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f42:	e08e      	b.n	8002062 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	2202      	movs	r2, #2
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d056      	beq.n	8002002 <HAL_DMA_IRQHandler+0x186>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d051      	beq.n	8002002 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10b      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 020a 	bic.w	r2, r2, #10
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a38      	ldr	r2, [pc, #224]	; (800206c <HAL_DMA_IRQHandler+0x1f0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d029      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x166>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a37      	ldr	r2, [pc, #220]	; (8002070 <HAL_DMA_IRQHandler+0x1f4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d022      	beq.n	8001fde <HAL_DMA_IRQHandler+0x162>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a35      	ldr	r2, [pc, #212]	; (8002074 <HAL_DMA_IRQHandler+0x1f8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01a      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x15c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a34      	ldr	r2, [pc, #208]	; (8002078 <HAL_DMA_IRQHandler+0x1fc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d012      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x156>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a32      	ldr	r2, [pc, #200]	; (800207c <HAL_DMA_IRQHandler+0x200>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00a      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x150>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a31      	ldr	r2, [pc, #196]	; (8002080 <HAL_DMA_IRQHandler+0x204>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d102      	bne.n	8001fc6 <HAL_DMA_IRQHandler+0x14a>
 8001fc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc4:	e00e      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x168>
 8001fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fca:	e00b      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x168>
 8001fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd0:	e008      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x168>
 8001fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd6:	e005      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x168>
 8001fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fdc:	e002      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x168>
 8001fde:	2320      	movs	r3, #32
 8001fe0:	e000      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x168>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	4a27      	ldr	r2, [pc, #156]	; (8002084 <HAL_DMA_IRQHandler+0x208>)
 8001fe6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d034      	beq.n	8002062 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002000:	e02f      	b.n	8002062 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2208      	movs	r2, #8
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d028      	beq.n	8002064 <HAL_DMA_IRQHandler+0x1e8>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d023      	beq.n	8002064 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 020e 	bic.w	r2, r2, #14
 800202a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	2101      	movs	r1, #1
 8002036:	fa01 f202 	lsl.w	r2, r1, r2
 800203a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
    }
  }
  return;
 8002062:	bf00      	nop
 8002064:	bf00      	nop
}
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40020008 	.word	0x40020008
 8002070:	4002001c 	.word	0x4002001c
 8002074:	40020030 	.word	0x40020030
 8002078:	40020044 	.word	0x40020044
 800207c:	40020058 	.word	0x40020058
 8002080:	4002006c 	.word	0x4002006c
 8002084:	40020000 	.word	0x40020000

08002088 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d108      	bne.n	80020c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020c6:	e007      	b.n	80020d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b08b      	sub	sp, #44	; 0x2c
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f6:	e169      	b.n	80023cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020f8:	2201      	movs	r2, #1
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	429a      	cmp	r2, r3
 8002112:	f040 8158 	bne.w	80023c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a9a      	ldr	r2, [pc, #616]	; (8002384 <HAL_GPIO_Init+0x2a0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d05e      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 8002120:	4a98      	ldr	r2, [pc, #608]	; (8002384 <HAL_GPIO_Init+0x2a0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d875      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 8002126:	4a98      	ldr	r2, [pc, #608]	; (8002388 <HAL_GPIO_Init+0x2a4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d058      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 800212c:	4a96      	ldr	r2, [pc, #600]	; (8002388 <HAL_GPIO_Init+0x2a4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d86f      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 8002132:	4a96      	ldr	r2, [pc, #600]	; (800238c <HAL_GPIO_Init+0x2a8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d052      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 8002138:	4a94      	ldr	r2, [pc, #592]	; (800238c <HAL_GPIO_Init+0x2a8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d869      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 800213e:	4a94      	ldr	r2, [pc, #592]	; (8002390 <HAL_GPIO_Init+0x2ac>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d04c      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 8002144:	4a92      	ldr	r2, [pc, #584]	; (8002390 <HAL_GPIO_Init+0x2ac>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d863      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 800214a:	4a92      	ldr	r2, [pc, #584]	; (8002394 <HAL_GPIO_Init+0x2b0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d046      	beq.n	80021de <HAL_GPIO_Init+0xfa>
 8002150:	4a90      	ldr	r2, [pc, #576]	; (8002394 <HAL_GPIO_Init+0x2b0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d85d      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 8002156:	2b12      	cmp	r3, #18
 8002158:	d82a      	bhi.n	80021b0 <HAL_GPIO_Init+0xcc>
 800215a:	2b12      	cmp	r3, #18
 800215c:	d859      	bhi.n	8002212 <HAL_GPIO_Init+0x12e>
 800215e:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <HAL_GPIO_Init+0x80>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	080021df 	.word	0x080021df
 8002168:	080021b9 	.word	0x080021b9
 800216c:	080021cb 	.word	0x080021cb
 8002170:	0800220d 	.word	0x0800220d
 8002174:	08002213 	.word	0x08002213
 8002178:	08002213 	.word	0x08002213
 800217c:	08002213 	.word	0x08002213
 8002180:	08002213 	.word	0x08002213
 8002184:	08002213 	.word	0x08002213
 8002188:	08002213 	.word	0x08002213
 800218c:	08002213 	.word	0x08002213
 8002190:	08002213 	.word	0x08002213
 8002194:	08002213 	.word	0x08002213
 8002198:	08002213 	.word	0x08002213
 800219c:	08002213 	.word	0x08002213
 80021a0:	08002213 	.word	0x08002213
 80021a4:	08002213 	.word	0x08002213
 80021a8:	080021c1 	.word	0x080021c1
 80021ac:	080021d5 	.word	0x080021d5
 80021b0:	4a79      	ldr	r2, [pc, #484]	; (8002398 <HAL_GPIO_Init+0x2b4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021b6:	e02c      	b.n	8002212 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e029      	b.n	8002214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	3304      	adds	r3, #4
 80021c6:	623b      	str	r3, [r7, #32]
          break;
 80021c8:	e024      	b.n	8002214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	3308      	adds	r3, #8
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e01f      	b.n	8002214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	330c      	adds	r3, #12
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e01a      	b.n	8002214 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021e6:	2304      	movs	r3, #4
 80021e8:	623b      	str	r3, [r7, #32]
          break;
 80021ea:	e013      	b.n	8002214 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f4:	2308      	movs	r3, #8
 80021f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	611a      	str	r2, [r3, #16]
          break;
 80021fe:	e009      	b.n	8002214 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002200:	2308      	movs	r3, #8
 8002202:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	615a      	str	r2, [r3, #20]
          break;
 800220a:	e003      	b.n	8002214 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x130>
          break;
 8002212:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2bff      	cmp	r3, #255	; 0xff
 8002218:	d801      	bhi.n	800221e <HAL_GPIO_Init+0x13a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	e001      	b.n	8002222 <HAL_GPIO_Init+0x13e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3304      	adds	r3, #4
 8002222:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2bff      	cmp	r3, #255	; 0xff
 8002228:	d802      	bhi.n	8002230 <HAL_GPIO_Init+0x14c>
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	e002      	b.n	8002236 <HAL_GPIO_Init+0x152>
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	3b08      	subs	r3, #8
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	210f      	movs	r1, #15
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	6a39      	ldr	r1, [r7, #32]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	431a      	orrs	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80b1 	beq.w	80023c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002264:	4b4d      	ldr	r3, [pc, #308]	; (800239c <HAL_GPIO_Init+0x2b8>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a4c      	ldr	r2, [pc, #304]	; (800239c <HAL_GPIO_Init+0x2b8>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_GPIO_Init+0x2b8>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800227c:	4a48      	ldr	r2, [pc, #288]	; (80023a0 <HAL_GPIO_Init+0x2bc>)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a40      	ldr	r2, [pc, #256]	; (80023a4 <HAL_GPIO_Init+0x2c0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d013      	beq.n	80022d0 <HAL_GPIO_Init+0x1ec>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a3f      	ldr	r2, [pc, #252]	; (80023a8 <HAL_GPIO_Init+0x2c4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00d      	beq.n	80022cc <HAL_GPIO_Init+0x1e8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <HAL_GPIO_Init+0x2c8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d007      	beq.n	80022c8 <HAL_GPIO_Init+0x1e4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3d      	ldr	r2, [pc, #244]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_GPIO_Init+0x1e0>
 80022c0:	2303      	movs	r3, #3
 80022c2:	e006      	b.n	80022d2 <HAL_GPIO_Init+0x1ee>
 80022c4:	2304      	movs	r3, #4
 80022c6:	e004      	b.n	80022d2 <HAL_GPIO_Init+0x1ee>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e002      	b.n	80022d2 <HAL_GPIO_Init+0x1ee>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_GPIO_Init+0x1ee>
 80022d0:	2300      	movs	r3, #0
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	f002 0203 	and.w	r2, r2, #3
 80022d8:	0092      	lsls	r2, r2, #2
 80022da:	4093      	lsls	r3, r2
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022e2:	492f      	ldr	r1, [pc, #188]	; (80023a0 <HAL_GPIO_Init+0x2bc>)
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	492c      	ldr	r1, [pc, #176]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	43db      	mvns	r3, r3
 8002312:	4928      	ldr	r1, [pc, #160]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002314:	4013      	ands	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	4922      	ldr	r1, [pc, #136]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	43db      	mvns	r3, r3
 800233a:	491e      	ldr	r1, [pc, #120]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800233c:	4013      	ands	r3, r2
 800233e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4918      	ldr	r1, [pc, #96]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	43db      	mvns	r3, r3
 8002362:	4914      	ldr	r1, [pc, #80]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002364:	4013      	ands	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d021      	beq.n	80023b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e021      	b.n	80023c6 <HAL_GPIO_Init+0x2e2>
 8002382:	bf00      	nop
 8002384:	10320000 	.word	0x10320000
 8002388:	10310000 	.word	0x10310000
 800238c:	10220000 	.word	0x10220000
 8002390:	10210000 	.word	0x10210000
 8002394:	10120000 	.word	0x10120000
 8002398:	10110000 	.word	0x10110000
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40010800 	.word	0x40010800
 80023a8:	40010c00 	.word	0x40010c00
 80023ac:	40011000 	.word	0x40011000
 80023b0:	40011400 	.word	0x40011400
 80023b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_GPIO_Init+0x304>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	43db      	mvns	r3, r3
 80023c0:	4909      	ldr	r1, [pc, #36]	; (80023e8 <HAL_GPIO_Init+0x304>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	3301      	adds	r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f47f ae8e 	bne.w	80020f8 <HAL_GPIO_Init+0x14>
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	372c      	adds	r7, #44	; 0x2c
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40010400 	.word	0x40010400

080023ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e001      	b.n	800240e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]
 8002426:	4613      	mov	r3, r2
 8002428:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800242a:	787b      	ldrb	r3, [r7, #1]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002430:	887a      	ldrh	r2, [r7, #2]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002436:	e003      	b.n	8002440 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	041a      	lsls	r2, r3, #16
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	611a      	str	r2, [r3, #16]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
	...

0800244c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e272      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8087 	beq.w	800257a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800246c:	4b92      	ldr	r3, [pc, #584]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b04      	cmp	r3, #4
 8002476:	d00c      	beq.n	8002492 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002478:	4b8f      	ldr	r3, [pc, #572]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d112      	bne.n	80024aa <HAL_RCC_OscConfig+0x5e>
 8002484:	4b8c      	ldr	r3, [pc, #560]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d10b      	bne.n	80024aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002492:	4b89      	ldr	r3, [pc, #548]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d06c      	beq.n	8002578 <HAL_RCC_OscConfig+0x12c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d168      	bne.n	8002578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e24c      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x76>
 80024b4:	4b80      	ldr	r3, [pc, #512]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7f      	ldr	r2, [pc, #508]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	e02e      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x98>
 80024ca:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7a      	ldr	r2, [pc, #488]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b78      	ldr	r3, [pc, #480]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a77      	ldr	r2, [pc, #476]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e01d      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0xbc>
 80024ee:	4b72      	ldr	r3, [pc, #456]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a71      	ldr	r2, [pc, #452]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6e      	ldr	r2, [pc, #440]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 8002508:	4b6b      	ldr	r3, [pc, #428]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6a      	ldr	r2, [pc, #424]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a67      	ldr	r2, [pc, #412]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fee6 	bl	80012f8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fee2 	bl	80012f8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e200      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0xe4>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fed2 	bl	80012f8 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fece 	bl	80012f8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1ec      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x10c>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002586:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002592:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b08      	cmp	r3, #8
 800259c:	d11c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x18c>
 800259e:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d116      	bne.n	80025d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x176>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e1c0      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4939      	ldr	r1, [pc, #228]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	e03a      	b.n	800264e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_RCC_OscConfig+0x270>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fe87 	bl	80012f8 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fe83 	bl	80012f8 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1a1      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4927      	ldr	r1, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_RCC_OscConfig+0x270>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fe66 	bl	80012f8 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002630:	f7fe fe62 	bl	80012f8 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e180      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d03a      	beq.n	80026d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d019      	beq.n	8002696 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002662:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002668:	f7fe fe46 	bl	80012f8 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002670:	f7fe fe42 	bl	80012f8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e160      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800268e:	2001      	movs	r0, #1
 8002690:	f000 face 	bl	8002c30 <RCC_Delay>
 8002694:	e01c      	b.n	80026d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7fe fe2c 	bl	80012f8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a2:	e00f      	b.n	80026c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe fe28 	bl	80012f8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d908      	bls.n	80026c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e146      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	42420000 	.word	0x42420000
 80026c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	4b92      	ldr	r3, [pc, #584]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e9      	bne.n	80026a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a6 	beq.w	800282a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e2:	4b8b      	ldr	r3, [pc, #556]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10d      	bne.n	800270a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	4b88      	ldr	r3, [pc, #544]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4a87      	ldr	r2, [pc, #540]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f8:	61d3      	str	r3, [r2, #28]
 80026fa:	4b85      	ldr	r3, [pc, #532]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b82      	ldr	r3, [pc, #520]	; (8002914 <HAL_RCC_OscConfig+0x4c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d118      	bne.n	8002748 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b7f      	ldr	r3, [pc, #508]	; (8002914 <HAL_RCC_OscConfig+0x4c8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7e      	ldr	r2, [pc, #504]	; (8002914 <HAL_RCC_OscConfig+0x4c8>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7fe fde9 	bl	80012f8 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272a:	f7fe fde5 	bl	80012f8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b64      	cmp	r3, #100	; 0x64
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e103      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	4b75      	ldr	r3, [pc, #468]	; (8002914 <HAL_RCC_OscConfig+0x4c8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x312>
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4a6e      	ldr	r2, [pc, #440]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	e02d      	b.n	80027ba <HAL_RCC_OscConfig+0x36e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x334>
 8002766:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a69      	ldr	r2, [pc, #420]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a66      	ldr	r2, [pc, #408]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	e01c      	b.n	80027ba <HAL_RCC_OscConfig+0x36e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b05      	cmp	r3, #5
 8002786:	d10c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x356>
 8002788:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a60      	ldr	r2, [pc, #384]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4a5d      	ldr	r2, [pc, #372]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6213      	str	r3, [r2, #32]
 80027a0:	e00b      	b.n	80027ba <HAL_RCC_OscConfig+0x36e>
 80027a2:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a5a      	ldr	r2, [pc, #360]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6213      	str	r3, [r2, #32]
 80027ae:	4b58      	ldr	r3, [pc, #352]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d015      	beq.n	80027ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fd99 	bl	80012f8 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe fd95 	bl	80012f8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0b1      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ee      	beq.n	80027ca <HAL_RCC_OscConfig+0x37e>
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fd83 	bl	80012f8 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fd7f 	bl	80012f8 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e09b      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ee      	bne.n	80027f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d105      	bne.n	800282a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281e:	4b3c      	ldr	r3, [pc, #240]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8087 	beq.w	8002942 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002834:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d061      	beq.n	8002904 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d146      	bne.n	80028d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002848:	4b33      	ldr	r3, [pc, #204]	; (8002918 <HAL_RCC_OscConfig+0x4cc>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe fd53 	bl	80012f8 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe fd4f 	bl	80012f8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e06d      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d108      	bne.n	8002890 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800287e:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	4921      	ldr	r1, [pc, #132]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002890:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a19      	ldr	r1, [r3, #32]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	430b      	orrs	r3, r1
 80028a2:	491b      	ldr	r1, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x4cc>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe fd23 	bl	80012f8 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe fd1f 	bl	80012f8 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e03d      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x46a>
 80028d4:	e035      	b.n	8002942 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_RCC_OscConfig+0x4cc>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe fd0c 	bl	80012f8 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe fd08 	bl	80012f8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e026      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x498>
 8002902:	e01e      	b.n	8002942 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e019      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
 8002918:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_OscConfig+0x500>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	429a      	cmp	r2, r3
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0d0      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4965      	ldr	r1, [pc, #404]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d040      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d115      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e073      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e06b      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2e:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4936      	ldr	r1, [pc, #216]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fc5a 	bl	80012f8 <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7fe fc56 	bl	80012f8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e053      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 020c 	and.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d1eb      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d210      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 0207 	bic.w	r2, r3, #7
 8002a86:	4922      	ldr	r1, [pc, #136]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f821 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1cc>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1d0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fbb8 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40022000 	.word	0x40022000
 8002b14:	40021000 	.word	0x40021000
 8002b18:	08003e84 	.word	0x08003e84
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d002      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x30>
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x36>
 8002b52:	e027      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002b56:	613b      	str	r3, [r7, #16]
      break;
 8002b58:	e027      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	0c9b      	lsrs	r3, r3, #18
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b64:	5cd3      	ldrb	r3, [r2, r3]
 8002b66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0c5b      	lsrs	r3, r3, #17
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002b86:	fb03 f202 	mul.w	r2, r3, r2
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e004      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b98:	fb02 f303 	mul.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	613b      	str	r3, [r7, #16]
      break;
 8002ba2:	e002      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ba6:	613b      	str	r3, [r7, #16]
      break;
 8002ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002baa:	693b      	ldr	r3, [r7, #16]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	007a1200 	.word	0x007a1200
 8002bc0:	08003e9c 	.word	0x08003e9c
 8002bc4:	08003eac 	.word	0x08003eac
 8002bc8:	003d0900 	.word	0x003d0900

08002bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd0:	4b02      	ldr	r3, [pc, #8]	; (8002bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	20000000 	.word	0x20000000

08002be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002be4:	f7ff fff2 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4903      	ldr	r1, [pc, #12]	; (8002c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08003e94 	.word	0x08003e94

08002c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c0c:	f7ff ffde 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	0adb      	lsrs	r3, r3, #11
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4903      	ldr	r1, [pc, #12]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	08003e94 	.word	0x08003e94

08002c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <RCC_Delay+0x34>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <RCC_Delay+0x38>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0a5b      	lsrs	r3, r3, #9
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c4c:	bf00      	nop
  }
  while (Delay --);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	60fa      	str	r2, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f9      	bne.n	8002c4c <RCC_Delay+0x1c>
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	20000000 	.word	0x20000000
 8002c68:	10624dd3 	.word	0x10624dd3

08002c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d07d      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8c:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c98:	4b4c      	ldr	r3, [pc, #304]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	4a4b      	ldr	r2, [pc, #300]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	61d3      	str	r3, [r2, #28]
 8002ca4:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d118      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc0:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fb14 	bl	80012f8 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd4:	f7fe fb10 	bl	80012f8 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e06d      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02e      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d027      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d10:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d014      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fadf 	bl	80012f8 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe fadb 	bl	80012f8 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e036      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4917      	ldr	r1, [pc, #92]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	490b      	ldr	r1, [pc, #44]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	4904      	ldr	r1, [pc, #16]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	42420440 	.word	0x42420440

08002dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e041      	b.n	8002e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe f924 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 f940 	bl	800309c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d001      	beq.n	8002e90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e032      	b.n	8002ef6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <HAL_TIM_Base_Start+0x88>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_TIM_Base_Start+0x48>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIM_Base_Start+0x48>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <HAL_TIM_Base_Start+0x8c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIM_Base_Start+0x48>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <HAL_TIM_Base_Start+0x90>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d111      	bne.n	8002ee4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d010      	beq.n	8002ef4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee2:	e007      	b.n	8002ef4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	40012c00 	.word	0x40012c00
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800

08002f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_TIM_ConfigClockSource+0x1c>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e0b4      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x186>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f60:	d03e      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	f200 8087 	bhi.w	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6e:	f000 8086 	beq.w	800307e <HAL_TIM_ConfigClockSource+0x172>
 8002f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f76:	d87f      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f78:	2b70      	cmp	r3, #112	; 0x70
 8002f7a:	d01a      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8002f7c:	2b70      	cmp	r3, #112	; 0x70
 8002f7e:	d87b      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f80:	2b60      	cmp	r3, #96	; 0x60
 8002f82:	d050      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x11a>
 8002f84:	2b60      	cmp	r3, #96	; 0x60
 8002f86:	d877      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b50      	cmp	r3, #80	; 0x50
 8002f8a:	d03c      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0xfa>
 8002f8c:	2b50      	cmp	r3, #80	; 0x50
 8002f8e:	d873      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d058      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x13a>
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d86f      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f98:	2b30      	cmp	r3, #48	; 0x30
 8002f9a:	d064      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x15a>
 8002f9c:	2b30      	cmp	r3, #48	; 0x30
 8002f9e:	d86b      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d060      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d867      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d05c      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x15a>
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d05a      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x15a>
 8002fb0:	e062      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6899      	ldr	r1, [r3, #8]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f000 f944 	bl	800324e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	609a      	str	r2, [r3, #8]
      break;
 8002fde:	e04f      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6899      	ldr	r1, [r3, #8]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f000 f92d 	bl	800324e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003002:	609a      	str	r2, [r3, #8]
      break;
 8003004:	e03c      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 f8a4 	bl	8003160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2150      	movs	r1, #80	; 0x50
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f8fb 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8003024:	e02c      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	461a      	mov	r2, r3
 8003034:	f000 f8c2 	bl	80031bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2160      	movs	r1, #96	; 0x60
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f8eb 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8003044:	e01c      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6859      	ldr	r1, [r3, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	461a      	mov	r2, r3
 8003054:	f000 f884 	bl	8003160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2140      	movs	r1, #64	; 0x40
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f8db 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8003064:	e00c      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4619      	mov	r1, r3
 8003070:	4610      	mov	r0, r2
 8003072:	f000 f8d2 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8003076:	e003      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      break;
 800307c:	e000      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800307e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a29      	ldr	r2, [pc, #164]	; (8003154 <TIM_Base_SetConfig+0xb8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00b      	beq.n	80030cc <TIM_Base_SetConfig+0x30>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d007      	beq.n	80030cc <TIM_Base_SetConfig+0x30>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a26      	ldr	r2, [pc, #152]	; (8003158 <TIM_Base_SetConfig+0xbc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_Base_SetConfig+0x30>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a25      	ldr	r2, [pc, #148]	; (800315c <TIM_Base_SetConfig+0xc0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d108      	bne.n	80030de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <TIM_Base_SetConfig+0xb8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00b      	beq.n	80030fe <TIM_Base_SetConfig+0x62>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d007      	beq.n	80030fe <TIM_Base_SetConfig+0x62>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a19      	ldr	r2, [pc, #100]	; (8003158 <TIM_Base_SetConfig+0xbc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_Base_SetConfig+0x62>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a18      	ldr	r2, [pc, #96]	; (800315c <TIM_Base_SetConfig+0xc0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d108      	bne.n	8003110 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <TIM_Base_SetConfig+0xb8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d103      	bne.n	8003144 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	615a      	str	r2, [r3, #20]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400
 800315c:	40000800 	.word	0x40000800

08003160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0201 	bic.w	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 030a 	bic.w	r3, r3, #10
 800319c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0210 	bic.w	r2, r3, #16
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	031b      	lsls	r3, r3, #12
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	f043 0307 	orr.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800324e:	b480      	push	{r7}
 8003250:	b087      	sub	sp, #28
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003268:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	021a      	lsls	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	431a      	orrs	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4313      	orrs	r3, r2
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e046      	b.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a16      	ldr	r2, [pc, #88]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00e      	beq.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d009      	beq.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a10      	ldr	r2, [pc, #64]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10c      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4313      	orrs	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	40012c00 	.word	0x40012c00
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800

08003348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e042      	b.n	80033e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fe8a 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800338a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f82b 	bl	80033e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003422:	f023 030c 	bic.w	r3, r3, #12
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	430b      	orrs	r3, r1
 800342e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <UART_SetConfig+0x114>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003450:	f7ff fbda 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	e002      	b.n	800345e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7ff fbc2 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 800345c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009a      	lsls	r2, r3, #2
 8003468:	441a      	add	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	4a22      	ldr	r2, [pc, #136]	; (8003500 <UART_SetConfig+0x118>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	0119      	lsls	r1, r3, #4
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	009a      	lsls	r2, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	fbb2 f2f3 	udiv	r2, r2, r3
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <UART_SetConfig+0x118>)
 8003496:	fba3 0302 	umull	r0, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2064      	movs	r0, #100	; 0x64
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	3332      	adds	r3, #50	; 0x32
 80034a8:	4a15      	ldr	r2, [pc, #84]	; (8003500 <UART_SetConfig+0x118>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b4:	4419      	add	r1, r3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009a      	lsls	r2, r3, #2
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <UART_SetConfig+0x118>)
 80034ce:	fba3 0302 	umull	r0, r3, r3, r2
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2064      	movs	r0, #100	; 0x64
 80034d6:	fb00 f303 	mul.w	r3, r0, r3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	3332      	adds	r3, #50	; 0x32
 80034e0:	4a07      	ldr	r2, [pc, #28]	; (8003500 <UART_SetConfig+0x118>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	440a      	add	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40013800 	.word	0x40013800
 8003500:	51eb851f 	.word	0x51eb851f

08003504 <__errno>:
 8003504:	4b01      	ldr	r3, [pc, #4]	; (800350c <__errno+0x8>)
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	2000000c 	.word	0x2000000c

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	2600      	movs	r6, #0
 8003514:	4d0c      	ldr	r5, [pc, #48]	; (8003548 <__libc_init_array+0x38>)
 8003516:	4c0d      	ldr	r4, [pc, #52]	; (800354c <__libc_init_array+0x3c>)
 8003518:	1b64      	subs	r4, r4, r5
 800351a:	10a4      	asrs	r4, r4, #2
 800351c:	42a6      	cmp	r6, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	f000 fc9c 	bl	8003e5c <_init>
 8003524:	2600      	movs	r6, #0
 8003526:	4d0a      	ldr	r5, [pc, #40]	; (8003550 <__libc_init_array+0x40>)
 8003528:	4c0a      	ldr	r4, [pc, #40]	; (8003554 <__libc_init_array+0x44>)
 800352a:	1b64      	subs	r4, r4, r5
 800352c:	10a4      	asrs	r4, r4, #2
 800352e:	42a6      	cmp	r6, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	f855 3b04 	ldr.w	r3, [r5], #4
 8003538:	4798      	blx	r3
 800353a:	3601      	adds	r6, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003542:	4798      	blx	r3
 8003544:	3601      	adds	r6, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	08003ee4 	.word	0x08003ee4
 800354c:	08003ee4 	.word	0x08003ee4
 8003550:	08003ee4 	.word	0x08003ee4
 8003554:	08003ee8 	.word	0x08003ee8

08003558 <memset>:
 8003558:	4603      	mov	r3, r0
 800355a:	4402      	add	r2, r0
 800355c:	4293      	cmp	r3, r2
 800355e:	d100      	bne.n	8003562 <memset+0xa>
 8003560:	4770      	bx	lr
 8003562:	f803 1b01 	strb.w	r1, [r3], #1
 8003566:	e7f9      	b.n	800355c <memset+0x4>

08003568 <siprintf>:
 8003568:	b40e      	push	{r1, r2, r3}
 800356a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800356e:	b500      	push	{lr}
 8003570:	b09c      	sub	sp, #112	; 0x70
 8003572:	ab1d      	add	r3, sp, #116	; 0x74
 8003574:	9002      	str	r0, [sp, #8]
 8003576:	9006      	str	r0, [sp, #24]
 8003578:	9107      	str	r1, [sp, #28]
 800357a:	9104      	str	r1, [sp, #16]
 800357c:	4808      	ldr	r0, [pc, #32]	; (80035a0 <siprintf+0x38>)
 800357e:	4909      	ldr	r1, [pc, #36]	; (80035a4 <siprintf+0x3c>)
 8003580:	f853 2b04 	ldr.w	r2, [r3], #4
 8003584:	9105      	str	r1, [sp, #20]
 8003586:	6800      	ldr	r0, [r0, #0]
 8003588:	a902      	add	r1, sp, #8
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	f000 f868 	bl	8003660 <_svfiprintf_r>
 8003590:	2200      	movs	r2, #0
 8003592:	9b02      	ldr	r3, [sp, #8]
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	b01c      	add	sp, #112	; 0x70
 8003598:	f85d eb04 	ldr.w	lr, [sp], #4
 800359c:	b003      	add	sp, #12
 800359e:	4770      	bx	lr
 80035a0:	2000000c 	.word	0x2000000c
 80035a4:	ffff0208 	.word	0xffff0208

080035a8 <__ssputs_r>:
 80035a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ac:	688e      	ldr	r6, [r1, #8]
 80035ae:	4682      	mov	sl, r0
 80035b0:	429e      	cmp	r6, r3
 80035b2:	460c      	mov	r4, r1
 80035b4:	4690      	mov	r8, r2
 80035b6:	461f      	mov	r7, r3
 80035b8:	d838      	bhi.n	800362c <__ssputs_r+0x84>
 80035ba:	898a      	ldrh	r2, [r1, #12]
 80035bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035c0:	d032      	beq.n	8003628 <__ssputs_r+0x80>
 80035c2:	6825      	ldr	r5, [r4, #0]
 80035c4:	6909      	ldr	r1, [r1, #16]
 80035c6:	3301      	adds	r3, #1
 80035c8:	eba5 0901 	sub.w	r9, r5, r1
 80035cc:	6965      	ldr	r5, [r4, #20]
 80035ce:	444b      	add	r3, r9
 80035d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035d8:	106d      	asrs	r5, r5, #1
 80035da:	429d      	cmp	r5, r3
 80035dc:	bf38      	it	cc
 80035de:	461d      	movcc	r5, r3
 80035e0:	0553      	lsls	r3, r2, #21
 80035e2:	d531      	bpl.n	8003648 <__ssputs_r+0xa0>
 80035e4:	4629      	mov	r1, r5
 80035e6:	f000 fb6f 	bl	8003cc8 <_malloc_r>
 80035ea:	4606      	mov	r6, r0
 80035ec:	b950      	cbnz	r0, 8003604 <__ssputs_r+0x5c>
 80035ee:	230c      	movs	r3, #12
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	f8ca 3000 	str.w	r3, [sl]
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fe:	81a3      	strh	r3, [r4, #12]
 8003600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003604:	464a      	mov	r2, r9
 8003606:	6921      	ldr	r1, [r4, #16]
 8003608:	f000 face 	bl	8003ba8 <memcpy>
 800360c:	89a3      	ldrh	r3, [r4, #12]
 800360e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003616:	81a3      	strh	r3, [r4, #12]
 8003618:	6126      	str	r6, [r4, #16]
 800361a:	444e      	add	r6, r9
 800361c:	6026      	str	r6, [r4, #0]
 800361e:	463e      	mov	r6, r7
 8003620:	6165      	str	r5, [r4, #20]
 8003622:	eba5 0509 	sub.w	r5, r5, r9
 8003626:	60a5      	str	r5, [r4, #8]
 8003628:	42be      	cmp	r6, r7
 800362a:	d900      	bls.n	800362e <__ssputs_r+0x86>
 800362c:	463e      	mov	r6, r7
 800362e:	4632      	mov	r2, r6
 8003630:	4641      	mov	r1, r8
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	f000 fac6 	bl	8003bc4 <memmove>
 8003638:	68a3      	ldr	r3, [r4, #8]
 800363a:	2000      	movs	r0, #0
 800363c:	1b9b      	subs	r3, r3, r6
 800363e:	60a3      	str	r3, [r4, #8]
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	4433      	add	r3, r6
 8003644:	6023      	str	r3, [r4, #0]
 8003646:	e7db      	b.n	8003600 <__ssputs_r+0x58>
 8003648:	462a      	mov	r2, r5
 800364a:	f000 fbb1 	bl	8003db0 <_realloc_r>
 800364e:	4606      	mov	r6, r0
 8003650:	2800      	cmp	r0, #0
 8003652:	d1e1      	bne.n	8003618 <__ssputs_r+0x70>
 8003654:	4650      	mov	r0, sl
 8003656:	6921      	ldr	r1, [r4, #16]
 8003658:	f000 face 	bl	8003bf8 <_free_r>
 800365c:	e7c7      	b.n	80035ee <__ssputs_r+0x46>
	...

08003660 <_svfiprintf_r>:
 8003660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003664:	4698      	mov	r8, r3
 8003666:	898b      	ldrh	r3, [r1, #12]
 8003668:	4607      	mov	r7, r0
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	460d      	mov	r5, r1
 800366e:	4614      	mov	r4, r2
 8003670:	b09d      	sub	sp, #116	; 0x74
 8003672:	d50e      	bpl.n	8003692 <_svfiprintf_r+0x32>
 8003674:	690b      	ldr	r3, [r1, #16]
 8003676:	b963      	cbnz	r3, 8003692 <_svfiprintf_r+0x32>
 8003678:	2140      	movs	r1, #64	; 0x40
 800367a:	f000 fb25 	bl	8003cc8 <_malloc_r>
 800367e:	6028      	str	r0, [r5, #0]
 8003680:	6128      	str	r0, [r5, #16]
 8003682:	b920      	cbnz	r0, 800368e <_svfiprintf_r+0x2e>
 8003684:	230c      	movs	r3, #12
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
 800368c:	e0d1      	b.n	8003832 <_svfiprintf_r+0x1d2>
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	616b      	str	r3, [r5, #20]
 8003692:	2300      	movs	r3, #0
 8003694:	9309      	str	r3, [sp, #36]	; 0x24
 8003696:	2320      	movs	r3, #32
 8003698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800369c:	2330      	movs	r3, #48	; 0x30
 800369e:	f04f 0901 	mov.w	r9, #1
 80036a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80036a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800384c <_svfiprintf_r+0x1ec>
 80036aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036ae:	4623      	mov	r3, r4
 80036b0:	469a      	mov	sl, r3
 80036b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036b6:	b10a      	cbz	r2, 80036bc <_svfiprintf_r+0x5c>
 80036b8:	2a25      	cmp	r2, #37	; 0x25
 80036ba:	d1f9      	bne.n	80036b0 <_svfiprintf_r+0x50>
 80036bc:	ebba 0b04 	subs.w	fp, sl, r4
 80036c0:	d00b      	beq.n	80036da <_svfiprintf_r+0x7a>
 80036c2:	465b      	mov	r3, fp
 80036c4:	4622      	mov	r2, r4
 80036c6:	4629      	mov	r1, r5
 80036c8:	4638      	mov	r0, r7
 80036ca:	f7ff ff6d 	bl	80035a8 <__ssputs_r>
 80036ce:	3001      	adds	r0, #1
 80036d0:	f000 80aa 	beq.w	8003828 <_svfiprintf_r+0x1c8>
 80036d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036d6:	445a      	add	r2, fp
 80036d8:	9209      	str	r2, [sp, #36]	; 0x24
 80036da:	f89a 3000 	ldrb.w	r3, [sl]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80a2 	beq.w	8003828 <_svfiprintf_r+0x1c8>
 80036e4:	2300      	movs	r3, #0
 80036e6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ee:	f10a 0a01 	add.w	sl, sl, #1
 80036f2:	9304      	str	r3, [sp, #16]
 80036f4:	9307      	str	r3, [sp, #28]
 80036f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036fa:	931a      	str	r3, [sp, #104]	; 0x68
 80036fc:	4654      	mov	r4, sl
 80036fe:	2205      	movs	r2, #5
 8003700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003704:	4851      	ldr	r0, [pc, #324]	; (800384c <_svfiprintf_r+0x1ec>)
 8003706:	f000 fa41 	bl	8003b8c <memchr>
 800370a:	9a04      	ldr	r2, [sp, #16]
 800370c:	b9d8      	cbnz	r0, 8003746 <_svfiprintf_r+0xe6>
 800370e:	06d0      	lsls	r0, r2, #27
 8003710:	bf44      	itt	mi
 8003712:	2320      	movmi	r3, #32
 8003714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003718:	0711      	lsls	r1, r2, #28
 800371a:	bf44      	itt	mi
 800371c:	232b      	movmi	r3, #43	; 0x2b
 800371e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003722:	f89a 3000 	ldrb.w	r3, [sl]
 8003726:	2b2a      	cmp	r3, #42	; 0x2a
 8003728:	d015      	beq.n	8003756 <_svfiprintf_r+0xf6>
 800372a:	4654      	mov	r4, sl
 800372c:	2000      	movs	r0, #0
 800372e:	f04f 0c0a 	mov.w	ip, #10
 8003732:	9a07      	ldr	r2, [sp, #28]
 8003734:	4621      	mov	r1, r4
 8003736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800373a:	3b30      	subs	r3, #48	; 0x30
 800373c:	2b09      	cmp	r3, #9
 800373e:	d94e      	bls.n	80037de <_svfiprintf_r+0x17e>
 8003740:	b1b0      	cbz	r0, 8003770 <_svfiprintf_r+0x110>
 8003742:	9207      	str	r2, [sp, #28]
 8003744:	e014      	b.n	8003770 <_svfiprintf_r+0x110>
 8003746:	eba0 0308 	sub.w	r3, r0, r8
 800374a:	fa09 f303 	lsl.w	r3, r9, r3
 800374e:	4313      	orrs	r3, r2
 8003750:	46a2      	mov	sl, r4
 8003752:	9304      	str	r3, [sp, #16]
 8003754:	e7d2      	b.n	80036fc <_svfiprintf_r+0x9c>
 8003756:	9b03      	ldr	r3, [sp, #12]
 8003758:	1d19      	adds	r1, r3, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	9103      	str	r1, [sp, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	bfbb      	ittet	lt
 8003762:	425b      	neglt	r3, r3
 8003764:	f042 0202 	orrlt.w	r2, r2, #2
 8003768:	9307      	strge	r3, [sp, #28]
 800376a:	9307      	strlt	r3, [sp, #28]
 800376c:	bfb8      	it	lt
 800376e:	9204      	strlt	r2, [sp, #16]
 8003770:	7823      	ldrb	r3, [r4, #0]
 8003772:	2b2e      	cmp	r3, #46	; 0x2e
 8003774:	d10c      	bne.n	8003790 <_svfiprintf_r+0x130>
 8003776:	7863      	ldrb	r3, [r4, #1]
 8003778:	2b2a      	cmp	r3, #42	; 0x2a
 800377a:	d135      	bne.n	80037e8 <_svfiprintf_r+0x188>
 800377c:	9b03      	ldr	r3, [sp, #12]
 800377e:	3402      	adds	r4, #2
 8003780:	1d1a      	adds	r2, r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	9203      	str	r2, [sp, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	bfb8      	it	lt
 800378a:	f04f 33ff 	movlt.w	r3, #4294967295
 800378e:	9305      	str	r3, [sp, #20]
 8003790:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003850 <_svfiprintf_r+0x1f0>
 8003794:	2203      	movs	r2, #3
 8003796:	4650      	mov	r0, sl
 8003798:	7821      	ldrb	r1, [r4, #0]
 800379a:	f000 f9f7 	bl	8003b8c <memchr>
 800379e:	b140      	cbz	r0, 80037b2 <_svfiprintf_r+0x152>
 80037a0:	2340      	movs	r3, #64	; 0x40
 80037a2:	eba0 000a 	sub.w	r0, r0, sl
 80037a6:	fa03 f000 	lsl.w	r0, r3, r0
 80037aa:	9b04      	ldr	r3, [sp, #16]
 80037ac:	3401      	adds	r4, #1
 80037ae:	4303      	orrs	r3, r0
 80037b0:	9304      	str	r3, [sp, #16]
 80037b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b6:	2206      	movs	r2, #6
 80037b8:	4826      	ldr	r0, [pc, #152]	; (8003854 <_svfiprintf_r+0x1f4>)
 80037ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037be:	f000 f9e5 	bl	8003b8c <memchr>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d038      	beq.n	8003838 <_svfiprintf_r+0x1d8>
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <_svfiprintf_r+0x1f8>)
 80037c8:	bb1b      	cbnz	r3, 8003812 <_svfiprintf_r+0x1b2>
 80037ca:	9b03      	ldr	r3, [sp, #12]
 80037cc:	3307      	adds	r3, #7
 80037ce:	f023 0307 	bic.w	r3, r3, #7
 80037d2:	3308      	adds	r3, #8
 80037d4:	9303      	str	r3, [sp, #12]
 80037d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037d8:	4433      	add	r3, r6
 80037da:	9309      	str	r3, [sp, #36]	; 0x24
 80037dc:	e767      	b.n	80036ae <_svfiprintf_r+0x4e>
 80037de:	460c      	mov	r4, r1
 80037e0:	2001      	movs	r0, #1
 80037e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037e6:	e7a5      	b.n	8003734 <_svfiprintf_r+0xd4>
 80037e8:	2300      	movs	r3, #0
 80037ea:	f04f 0c0a 	mov.w	ip, #10
 80037ee:	4619      	mov	r1, r3
 80037f0:	3401      	adds	r4, #1
 80037f2:	9305      	str	r3, [sp, #20]
 80037f4:	4620      	mov	r0, r4
 80037f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037fa:	3a30      	subs	r2, #48	; 0x30
 80037fc:	2a09      	cmp	r2, #9
 80037fe:	d903      	bls.n	8003808 <_svfiprintf_r+0x1a8>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0c5      	beq.n	8003790 <_svfiprintf_r+0x130>
 8003804:	9105      	str	r1, [sp, #20]
 8003806:	e7c3      	b.n	8003790 <_svfiprintf_r+0x130>
 8003808:	4604      	mov	r4, r0
 800380a:	2301      	movs	r3, #1
 800380c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003810:	e7f0      	b.n	80037f4 <_svfiprintf_r+0x194>
 8003812:	ab03      	add	r3, sp, #12
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	462a      	mov	r2, r5
 8003818:	4638      	mov	r0, r7
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <_svfiprintf_r+0x1fc>)
 800381c:	a904      	add	r1, sp, #16
 800381e:	f3af 8000 	nop.w
 8003822:	1c42      	adds	r2, r0, #1
 8003824:	4606      	mov	r6, r0
 8003826:	d1d6      	bne.n	80037d6 <_svfiprintf_r+0x176>
 8003828:	89ab      	ldrh	r3, [r5, #12]
 800382a:	065b      	lsls	r3, r3, #25
 800382c:	f53f af2c 	bmi.w	8003688 <_svfiprintf_r+0x28>
 8003830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003832:	b01d      	add	sp, #116	; 0x74
 8003834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003838:	ab03      	add	r3, sp, #12
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	462a      	mov	r2, r5
 800383e:	4638      	mov	r0, r7
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <_svfiprintf_r+0x1fc>)
 8003842:	a904      	add	r1, sp, #16
 8003844:	f000 f87c 	bl	8003940 <_printf_i>
 8003848:	e7eb      	b.n	8003822 <_svfiprintf_r+0x1c2>
 800384a:	bf00      	nop
 800384c:	08003eae 	.word	0x08003eae
 8003850:	08003eb4 	.word	0x08003eb4
 8003854:	08003eb8 	.word	0x08003eb8
 8003858:	00000000 	.word	0x00000000
 800385c:	080035a9 	.word	0x080035a9

08003860 <_printf_common>:
 8003860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003864:	4616      	mov	r6, r2
 8003866:	4699      	mov	r9, r3
 8003868:	688a      	ldr	r2, [r1, #8]
 800386a:	690b      	ldr	r3, [r1, #16]
 800386c:	4607      	mov	r7, r0
 800386e:	4293      	cmp	r3, r2
 8003870:	bfb8      	it	lt
 8003872:	4613      	movlt	r3, r2
 8003874:	6033      	str	r3, [r6, #0]
 8003876:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800387a:	460c      	mov	r4, r1
 800387c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003880:	b10a      	cbz	r2, 8003886 <_printf_common+0x26>
 8003882:	3301      	adds	r3, #1
 8003884:	6033      	str	r3, [r6, #0]
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	0699      	lsls	r1, r3, #26
 800388a:	bf42      	ittt	mi
 800388c:	6833      	ldrmi	r3, [r6, #0]
 800388e:	3302      	addmi	r3, #2
 8003890:	6033      	strmi	r3, [r6, #0]
 8003892:	6825      	ldr	r5, [r4, #0]
 8003894:	f015 0506 	ands.w	r5, r5, #6
 8003898:	d106      	bne.n	80038a8 <_printf_common+0x48>
 800389a:	f104 0a19 	add.w	sl, r4, #25
 800389e:	68e3      	ldr	r3, [r4, #12]
 80038a0:	6832      	ldr	r2, [r6, #0]
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	42ab      	cmp	r3, r5
 80038a6:	dc28      	bgt.n	80038fa <_printf_common+0x9a>
 80038a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038ac:	1e13      	subs	r3, r2, #0
 80038ae:	6822      	ldr	r2, [r4, #0]
 80038b0:	bf18      	it	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	0692      	lsls	r2, r2, #26
 80038b6:	d42d      	bmi.n	8003914 <_printf_common+0xb4>
 80038b8:	4649      	mov	r1, r9
 80038ba:	4638      	mov	r0, r7
 80038bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038c0:	47c0      	blx	r8
 80038c2:	3001      	adds	r0, #1
 80038c4:	d020      	beq.n	8003908 <_printf_common+0xa8>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	68e5      	ldr	r5, [r4, #12]
 80038ca:	f003 0306 	and.w	r3, r3, #6
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf18      	it	ne
 80038d2:	2500      	movne	r5, #0
 80038d4:	6832      	ldr	r2, [r6, #0]
 80038d6:	f04f 0600 	mov.w	r6, #0
 80038da:	68a3      	ldr	r3, [r4, #8]
 80038dc:	bf08      	it	eq
 80038de:	1aad      	subeq	r5, r5, r2
 80038e0:	6922      	ldr	r2, [r4, #16]
 80038e2:	bf08      	it	eq
 80038e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bfc4      	itt	gt
 80038ec:	1a9b      	subgt	r3, r3, r2
 80038ee:	18ed      	addgt	r5, r5, r3
 80038f0:	341a      	adds	r4, #26
 80038f2:	42b5      	cmp	r5, r6
 80038f4:	d11a      	bne.n	800392c <_printf_common+0xcc>
 80038f6:	2000      	movs	r0, #0
 80038f8:	e008      	b.n	800390c <_printf_common+0xac>
 80038fa:	2301      	movs	r3, #1
 80038fc:	4652      	mov	r2, sl
 80038fe:	4649      	mov	r1, r9
 8003900:	4638      	mov	r0, r7
 8003902:	47c0      	blx	r8
 8003904:	3001      	adds	r0, #1
 8003906:	d103      	bne.n	8003910 <_printf_common+0xb0>
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003910:	3501      	adds	r5, #1
 8003912:	e7c4      	b.n	800389e <_printf_common+0x3e>
 8003914:	2030      	movs	r0, #48	; 0x30
 8003916:	18e1      	adds	r1, r4, r3
 8003918:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003922:	4422      	add	r2, r4
 8003924:	3302      	adds	r3, #2
 8003926:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800392a:	e7c5      	b.n	80038b8 <_printf_common+0x58>
 800392c:	2301      	movs	r3, #1
 800392e:	4622      	mov	r2, r4
 8003930:	4649      	mov	r1, r9
 8003932:	4638      	mov	r0, r7
 8003934:	47c0      	blx	r8
 8003936:	3001      	adds	r0, #1
 8003938:	d0e6      	beq.n	8003908 <_printf_common+0xa8>
 800393a:	3601      	adds	r6, #1
 800393c:	e7d9      	b.n	80038f2 <_printf_common+0x92>
	...

08003940 <_printf_i>:
 8003940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	7e0f      	ldrb	r7, [r1, #24]
 8003946:	4691      	mov	r9, r2
 8003948:	2f78      	cmp	r7, #120	; 0x78
 800394a:	4680      	mov	r8, r0
 800394c:	460c      	mov	r4, r1
 800394e:	469a      	mov	sl, r3
 8003950:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003956:	d807      	bhi.n	8003968 <_printf_i+0x28>
 8003958:	2f62      	cmp	r7, #98	; 0x62
 800395a:	d80a      	bhi.n	8003972 <_printf_i+0x32>
 800395c:	2f00      	cmp	r7, #0
 800395e:	f000 80d9 	beq.w	8003b14 <_printf_i+0x1d4>
 8003962:	2f58      	cmp	r7, #88	; 0x58
 8003964:	f000 80a4 	beq.w	8003ab0 <_printf_i+0x170>
 8003968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800396c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003970:	e03a      	b.n	80039e8 <_printf_i+0xa8>
 8003972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003976:	2b15      	cmp	r3, #21
 8003978:	d8f6      	bhi.n	8003968 <_printf_i+0x28>
 800397a:	a101      	add	r1, pc, #4	; (adr r1, 8003980 <_printf_i+0x40>)
 800397c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003980:	080039d9 	.word	0x080039d9
 8003984:	080039ed 	.word	0x080039ed
 8003988:	08003969 	.word	0x08003969
 800398c:	08003969 	.word	0x08003969
 8003990:	08003969 	.word	0x08003969
 8003994:	08003969 	.word	0x08003969
 8003998:	080039ed 	.word	0x080039ed
 800399c:	08003969 	.word	0x08003969
 80039a0:	08003969 	.word	0x08003969
 80039a4:	08003969 	.word	0x08003969
 80039a8:	08003969 	.word	0x08003969
 80039ac:	08003afb 	.word	0x08003afb
 80039b0:	08003a1d 	.word	0x08003a1d
 80039b4:	08003add 	.word	0x08003add
 80039b8:	08003969 	.word	0x08003969
 80039bc:	08003969 	.word	0x08003969
 80039c0:	08003b1d 	.word	0x08003b1d
 80039c4:	08003969 	.word	0x08003969
 80039c8:	08003a1d 	.word	0x08003a1d
 80039cc:	08003969 	.word	0x08003969
 80039d0:	08003969 	.word	0x08003969
 80039d4:	08003ae5 	.word	0x08003ae5
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	1d1a      	adds	r2, r3, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	602a      	str	r2, [r5, #0]
 80039e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0a4      	b.n	8003b36 <_printf_i+0x1f6>
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	6829      	ldr	r1, [r5, #0]
 80039f0:	0606      	lsls	r6, r0, #24
 80039f2:	f101 0304 	add.w	r3, r1, #4
 80039f6:	d50a      	bpl.n	8003a0e <_printf_i+0xce>
 80039f8:	680e      	ldr	r6, [r1, #0]
 80039fa:	602b      	str	r3, [r5, #0]
 80039fc:	2e00      	cmp	r6, #0
 80039fe:	da03      	bge.n	8003a08 <_printf_i+0xc8>
 8003a00:	232d      	movs	r3, #45	; 0x2d
 8003a02:	4276      	negs	r6, r6
 8003a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a08:	230a      	movs	r3, #10
 8003a0a:	485e      	ldr	r0, [pc, #376]	; (8003b84 <_printf_i+0x244>)
 8003a0c:	e019      	b.n	8003a42 <_printf_i+0x102>
 8003a0e:	680e      	ldr	r6, [r1, #0]
 8003a10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	bf18      	it	ne
 8003a18:	b236      	sxthne	r6, r6
 8003a1a:	e7ef      	b.n	80039fc <_printf_i+0xbc>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	6820      	ldr	r0, [r4, #0]
 8003a20:	1d19      	adds	r1, r3, #4
 8003a22:	6029      	str	r1, [r5, #0]
 8003a24:	0601      	lsls	r1, r0, #24
 8003a26:	d501      	bpl.n	8003a2c <_printf_i+0xec>
 8003a28:	681e      	ldr	r6, [r3, #0]
 8003a2a:	e002      	b.n	8003a32 <_printf_i+0xf2>
 8003a2c:	0646      	lsls	r6, r0, #25
 8003a2e:	d5fb      	bpl.n	8003a28 <_printf_i+0xe8>
 8003a30:	881e      	ldrh	r6, [r3, #0]
 8003a32:	2f6f      	cmp	r7, #111	; 0x6f
 8003a34:	bf0c      	ite	eq
 8003a36:	2308      	moveq	r3, #8
 8003a38:	230a      	movne	r3, #10
 8003a3a:	4852      	ldr	r0, [pc, #328]	; (8003b84 <_printf_i+0x244>)
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a42:	6865      	ldr	r5, [r4, #4]
 8003a44:	2d00      	cmp	r5, #0
 8003a46:	bfa8      	it	ge
 8003a48:	6821      	ldrge	r1, [r4, #0]
 8003a4a:	60a5      	str	r5, [r4, #8]
 8003a4c:	bfa4      	itt	ge
 8003a4e:	f021 0104 	bicge.w	r1, r1, #4
 8003a52:	6021      	strge	r1, [r4, #0]
 8003a54:	b90e      	cbnz	r6, 8003a5a <_printf_i+0x11a>
 8003a56:	2d00      	cmp	r5, #0
 8003a58:	d04d      	beq.n	8003af6 <_printf_i+0x1b6>
 8003a5a:	4615      	mov	r5, r2
 8003a5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a60:	fb03 6711 	mls	r7, r3, r1, r6
 8003a64:	5dc7      	ldrb	r7, [r0, r7]
 8003a66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a6a:	4637      	mov	r7, r6
 8003a6c:	42bb      	cmp	r3, r7
 8003a6e:	460e      	mov	r6, r1
 8003a70:	d9f4      	bls.n	8003a5c <_printf_i+0x11c>
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d10b      	bne.n	8003a8e <_printf_i+0x14e>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	07de      	lsls	r6, r3, #31
 8003a7a:	d508      	bpl.n	8003a8e <_printf_i+0x14e>
 8003a7c:	6923      	ldr	r3, [r4, #16]
 8003a7e:	6861      	ldr	r1, [r4, #4]
 8003a80:	4299      	cmp	r1, r3
 8003a82:	bfde      	ittt	le
 8003a84:	2330      	movle	r3, #48	; 0x30
 8003a86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a8e:	1b52      	subs	r2, r2, r5
 8003a90:	6122      	str	r2, [r4, #16]
 8003a92:	464b      	mov	r3, r9
 8003a94:	4621      	mov	r1, r4
 8003a96:	4640      	mov	r0, r8
 8003a98:	f8cd a000 	str.w	sl, [sp]
 8003a9c:	aa03      	add	r2, sp, #12
 8003a9e:	f7ff fedf 	bl	8003860 <_printf_common>
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d14c      	bne.n	8003b40 <_printf_i+0x200>
 8003aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aaa:	b004      	add	sp, #16
 8003aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab0:	4834      	ldr	r0, [pc, #208]	; (8003b84 <_printf_i+0x244>)
 8003ab2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ab6:	6829      	ldr	r1, [r5, #0]
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	f851 6b04 	ldr.w	r6, [r1], #4
 8003abe:	6029      	str	r1, [r5, #0]
 8003ac0:	061d      	lsls	r5, r3, #24
 8003ac2:	d514      	bpl.n	8003aee <_printf_i+0x1ae>
 8003ac4:	07df      	lsls	r7, r3, #31
 8003ac6:	bf44      	itt	mi
 8003ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8003acc:	6023      	strmi	r3, [r4, #0]
 8003ace:	b91e      	cbnz	r6, 8003ad8 <_printf_i+0x198>
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	f023 0320 	bic.w	r3, r3, #32
 8003ad6:	6023      	str	r3, [r4, #0]
 8003ad8:	2310      	movs	r3, #16
 8003ada:	e7af      	b.n	8003a3c <_printf_i+0xfc>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	f043 0320 	orr.w	r3, r3, #32
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	2378      	movs	r3, #120	; 0x78
 8003ae6:	4828      	ldr	r0, [pc, #160]	; (8003b88 <_printf_i+0x248>)
 8003ae8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aec:	e7e3      	b.n	8003ab6 <_printf_i+0x176>
 8003aee:	0659      	lsls	r1, r3, #25
 8003af0:	bf48      	it	mi
 8003af2:	b2b6      	uxthmi	r6, r6
 8003af4:	e7e6      	b.n	8003ac4 <_printf_i+0x184>
 8003af6:	4615      	mov	r5, r2
 8003af8:	e7bb      	b.n	8003a72 <_printf_i+0x132>
 8003afa:	682b      	ldr	r3, [r5, #0]
 8003afc:	6826      	ldr	r6, [r4, #0]
 8003afe:	1d18      	adds	r0, r3, #4
 8003b00:	6961      	ldr	r1, [r4, #20]
 8003b02:	6028      	str	r0, [r5, #0]
 8003b04:	0635      	lsls	r5, r6, #24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	d501      	bpl.n	8003b0e <_printf_i+0x1ce>
 8003b0a:	6019      	str	r1, [r3, #0]
 8003b0c:	e002      	b.n	8003b14 <_printf_i+0x1d4>
 8003b0e:	0670      	lsls	r0, r6, #25
 8003b10:	d5fb      	bpl.n	8003b0a <_printf_i+0x1ca>
 8003b12:	8019      	strh	r1, [r3, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	4615      	mov	r5, r2
 8003b18:	6123      	str	r3, [r4, #16]
 8003b1a:	e7ba      	b.n	8003a92 <_printf_i+0x152>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	2100      	movs	r1, #0
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	602a      	str	r2, [r5, #0]
 8003b24:	681d      	ldr	r5, [r3, #0]
 8003b26:	6862      	ldr	r2, [r4, #4]
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f000 f82f 	bl	8003b8c <memchr>
 8003b2e:	b108      	cbz	r0, 8003b34 <_printf_i+0x1f4>
 8003b30:	1b40      	subs	r0, r0, r5
 8003b32:	6060      	str	r0, [r4, #4]
 8003b34:	6863      	ldr	r3, [r4, #4]
 8003b36:	6123      	str	r3, [r4, #16]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b3e:	e7a8      	b.n	8003a92 <_printf_i+0x152>
 8003b40:	462a      	mov	r2, r5
 8003b42:	4649      	mov	r1, r9
 8003b44:	4640      	mov	r0, r8
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	47d0      	blx	sl
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	d0ab      	beq.n	8003aa6 <_printf_i+0x166>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	079b      	lsls	r3, r3, #30
 8003b52:	d413      	bmi.n	8003b7c <_printf_i+0x23c>
 8003b54:	68e0      	ldr	r0, [r4, #12]
 8003b56:	9b03      	ldr	r3, [sp, #12]
 8003b58:	4298      	cmp	r0, r3
 8003b5a:	bfb8      	it	lt
 8003b5c:	4618      	movlt	r0, r3
 8003b5e:	e7a4      	b.n	8003aaa <_printf_i+0x16a>
 8003b60:	2301      	movs	r3, #1
 8003b62:	4632      	mov	r2, r6
 8003b64:	4649      	mov	r1, r9
 8003b66:	4640      	mov	r0, r8
 8003b68:	47d0      	blx	sl
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d09b      	beq.n	8003aa6 <_printf_i+0x166>
 8003b6e:	3501      	adds	r5, #1
 8003b70:	68e3      	ldr	r3, [r4, #12]
 8003b72:	9903      	ldr	r1, [sp, #12]
 8003b74:	1a5b      	subs	r3, r3, r1
 8003b76:	42ab      	cmp	r3, r5
 8003b78:	dcf2      	bgt.n	8003b60 <_printf_i+0x220>
 8003b7a:	e7eb      	b.n	8003b54 <_printf_i+0x214>
 8003b7c:	2500      	movs	r5, #0
 8003b7e:	f104 0619 	add.w	r6, r4, #25
 8003b82:	e7f5      	b.n	8003b70 <_printf_i+0x230>
 8003b84:	08003ebf 	.word	0x08003ebf
 8003b88:	08003ed0 	.word	0x08003ed0

08003b8c <memchr>:
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	b510      	push	{r4, lr}
 8003b90:	b2c9      	uxtb	r1, r1
 8003b92:	4402      	add	r2, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	d101      	bne.n	8003b9e <memchr+0x12>
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	e003      	b.n	8003ba6 <memchr+0x1a>
 8003b9e:	7804      	ldrb	r4, [r0, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	428c      	cmp	r4, r1
 8003ba4:	d1f6      	bne.n	8003b94 <memchr+0x8>
 8003ba6:	bd10      	pop	{r4, pc}

08003ba8 <memcpy>:
 8003ba8:	440a      	add	r2, r1
 8003baa:	4291      	cmp	r1, r2
 8003bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bb0:	d100      	bne.n	8003bb4 <memcpy+0xc>
 8003bb2:	4770      	bx	lr
 8003bb4:	b510      	push	{r4, lr}
 8003bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bba:	4291      	cmp	r1, r2
 8003bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bc0:	d1f9      	bne.n	8003bb6 <memcpy+0xe>
 8003bc2:	bd10      	pop	{r4, pc}

08003bc4 <memmove>:
 8003bc4:	4288      	cmp	r0, r1
 8003bc6:	b510      	push	{r4, lr}
 8003bc8:	eb01 0402 	add.w	r4, r1, r2
 8003bcc:	d902      	bls.n	8003bd4 <memmove+0x10>
 8003bce:	4284      	cmp	r4, r0
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	d807      	bhi.n	8003be4 <memmove+0x20>
 8003bd4:	1e43      	subs	r3, r0, #1
 8003bd6:	42a1      	cmp	r1, r4
 8003bd8:	d008      	beq.n	8003bec <memmove+0x28>
 8003bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003be2:	e7f8      	b.n	8003bd6 <memmove+0x12>
 8003be4:	4601      	mov	r1, r0
 8003be6:	4402      	add	r2, r0
 8003be8:	428a      	cmp	r2, r1
 8003bea:	d100      	bne.n	8003bee <memmove+0x2a>
 8003bec:	bd10      	pop	{r4, pc}
 8003bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bf6:	e7f7      	b.n	8003be8 <memmove+0x24>

08003bf8 <_free_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	d040      	beq.n	8003c82 <_free_r+0x8a>
 8003c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c04:	1f0c      	subs	r4, r1, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bfb8      	it	lt
 8003c0a:	18e4      	addlt	r4, r4, r3
 8003c0c:	f000 f910 	bl	8003e30 <__malloc_lock>
 8003c10:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <_free_r+0x8c>)
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	b933      	cbnz	r3, 8003c24 <_free_r+0x2c>
 8003c16:	6063      	str	r3, [r4, #4]
 8003c18:	6014      	str	r4, [r2, #0]
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c20:	f000 b90c 	b.w	8003e3c <__malloc_unlock>
 8003c24:	42a3      	cmp	r3, r4
 8003c26:	d908      	bls.n	8003c3a <_free_r+0x42>
 8003c28:	6820      	ldr	r0, [r4, #0]
 8003c2a:	1821      	adds	r1, r4, r0
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	bf01      	itttt	eq
 8003c30:	6819      	ldreq	r1, [r3, #0]
 8003c32:	685b      	ldreq	r3, [r3, #4]
 8003c34:	1809      	addeq	r1, r1, r0
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	e7ed      	b.n	8003c16 <_free_r+0x1e>
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	b10b      	cbz	r3, 8003c44 <_free_r+0x4c>
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	d9fa      	bls.n	8003c3a <_free_r+0x42>
 8003c44:	6811      	ldr	r1, [r2, #0]
 8003c46:	1850      	adds	r0, r2, r1
 8003c48:	42a0      	cmp	r0, r4
 8003c4a:	d10b      	bne.n	8003c64 <_free_r+0x6c>
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	4401      	add	r1, r0
 8003c50:	1850      	adds	r0, r2, r1
 8003c52:	4283      	cmp	r3, r0
 8003c54:	6011      	str	r1, [r2, #0]
 8003c56:	d1e0      	bne.n	8003c1a <_free_r+0x22>
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4401      	add	r1, r0
 8003c5e:	6011      	str	r1, [r2, #0]
 8003c60:	6053      	str	r3, [r2, #4]
 8003c62:	e7da      	b.n	8003c1a <_free_r+0x22>
 8003c64:	d902      	bls.n	8003c6c <_free_r+0x74>
 8003c66:	230c      	movs	r3, #12
 8003c68:	602b      	str	r3, [r5, #0]
 8003c6a:	e7d6      	b.n	8003c1a <_free_r+0x22>
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	1821      	adds	r1, r4, r0
 8003c70:	428b      	cmp	r3, r1
 8003c72:	bf01      	itttt	eq
 8003c74:	6819      	ldreq	r1, [r3, #0]
 8003c76:	685b      	ldreq	r3, [r3, #4]
 8003c78:	1809      	addeq	r1, r1, r0
 8003c7a:	6021      	streq	r1, [r4, #0]
 8003c7c:	6063      	str	r3, [r4, #4]
 8003c7e:	6054      	str	r4, [r2, #4]
 8003c80:	e7cb      	b.n	8003c1a <_free_r+0x22>
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	200001a8 	.word	0x200001a8

08003c88 <sbrk_aligned>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	4e0e      	ldr	r6, [pc, #56]	; (8003cc4 <sbrk_aligned+0x3c>)
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	6831      	ldr	r1, [r6, #0]
 8003c90:	4605      	mov	r5, r0
 8003c92:	b911      	cbnz	r1, 8003c9a <sbrk_aligned+0x12>
 8003c94:	f000 f8bc 	bl	8003e10 <_sbrk_r>
 8003c98:	6030      	str	r0, [r6, #0]
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f000 f8b7 	bl	8003e10 <_sbrk_r>
 8003ca2:	1c43      	adds	r3, r0, #1
 8003ca4:	d00a      	beq.n	8003cbc <sbrk_aligned+0x34>
 8003ca6:	1cc4      	adds	r4, r0, #3
 8003ca8:	f024 0403 	bic.w	r4, r4, #3
 8003cac:	42a0      	cmp	r0, r4
 8003cae:	d007      	beq.n	8003cc0 <sbrk_aligned+0x38>
 8003cb0:	1a21      	subs	r1, r4, r0
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f000 f8ac 	bl	8003e10 <_sbrk_r>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d101      	bne.n	8003cc0 <sbrk_aligned+0x38>
 8003cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	200001ac 	.word	0x200001ac

08003cc8 <_malloc_r>:
 8003cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ccc:	1ccd      	adds	r5, r1, #3
 8003cce:	f025 0503 	bic.w	r5, r5, #3
 8003cd2:	3508      	adds	r5, #8
 8003cd4:	2d0c      	cmp	r5, #12
 8003cd6:	bf38      	it	cc
 8003cd8:	250c      	movcc	r5, #12
 8003cda:	2d00      	cmp	r5, #0
 8003cdc:	4607      	mov	r7, r0
 8003cde:	db01      	blt.n	8003ce4 <_malloc_r+0x1c>
 8003ce0:	42a9      	cmp	r1, r5
 8003ce2:	d905      	bls.n	8003cf0 <_malloc_r+0x28>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	2600      	movs	r6, #0
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4630      	mov	r0, r6
 8003cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf0:	4e2e      	ldr	r6, [pc, #184]	; (8003dac <_malloc_r+0xe4>)
 8003cf2:	f000 f89d 	bl	8003e30 <__malloc_lock>
 8003cf6:	6833      	ldr	r3, [r6, #0]
 8003cf8:	461c      	mov	r4, r3
 8003cfa:	bb34      	cbnz	r4, 8003d4a <_malloc_r+0x82>
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	4638      	mov	r0, r7
 8003d00:	f7ff ffc2 	bl	8003c88 <sbrk_aligned>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	4604      	mov	r4, r0
 8003d08:	d14d      	bne.n	8003da6 <_malloc_r+0xde>
 8003d0a:	6834      	ldr	r4, [r6, #0]
 8003d0c:	4626      	mov	r6, r4
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	d140      	bne.n	8003d94 <_malloc_r+0xcc>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	4631      	mov	r1, r6
 8003d16:	4638      	mov	r0, r7
 8003d18:	eb04 0803 	add.w	r8, r4, r3
 8003d1c:	f000 f878 	bl	8003e10 <_sbrk_r>
 8003d20:	4580      	cmp	r8, r0
 8003d22:	d13a      	bne.n	8003d9a <_malloc_r+0xd2>
 8003d24:	6821      	ldr	r1, [r4, #0]
 8003d26:	3503      	adds	r5, #3
 8003d28:	1a6d      	subs	r5, r5, r1
 8003d2a:	f025 0503 	bic.w	r5, r5, #3
 8003d2e:	3508      	adds	r5, #8
 8003d30:	2d0c      	cmp	r5, #12
 8003d32:	bf38      	it	cc
 8003d34:	250c      	movcc	r5, #12
 8003d36:	4638      	mov	r0, r7
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f7ff ffa5 	bl	8003c88 <sbrk_aligned>
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d02b      	beq.n	8003d9a <_malloc_r+0xd2>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	442b      	add	r3, r5
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	e00e      	b.n	8003d68 <_malloc_r+0xa0>
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	1b52      	subs	r2, r2, r5
 8003d4e:	d41e      	bmi.n	8003d8e <_malloc_r+0xc6>
 8003d50:	2a0b      	cmp	r2, #11
 8003d52:	d916      	bls.n	8003d82 <_malloc_r+0xba>
 8003d54:	1961      	adds	r1, r4, r5
 8003d56:	42a3      	cmp	r3, r4
 8003d58:	6025      	str	r5, [r4, #0]
 8003d5a:	bf18      	it	ne
 8003d5c:	6059      	strne	r1, [r3, #4]
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	bf08      	it	eq
 8003d62:	6031      	streq	r1, [r6, #0]
 8003d64:	5162      	str	r2, [r4, r5]
 8003d66:	604b      	str	r3, [r1, #4]
 8003d68:	4638      	mov	r0, r7
 8003d6a:	f104 060b 	add.w	r6, r4, #11
 8003d6e:	f000 f865 	bl	8003e3c <__malloc_unlock>
 8003d72:	f026 0607 	bic.w	r6, r6, #7
 8003d76:	1d23      	adds	r3, r4, #4
 8003d78:	1af2      	subs	r2, r6, r3
 8003d7a:	d0b6      	beq.n	8003cea <_malloc_r+0x22>
 8003d7c:	1b9b      	subs	r3, r3, r6
 8003d7e:	50a3      	str	r3, [r4, r2]
 8003d80:	e7b3      	b.n	8003cea <_malloc_r+0x22>
 8003d82:	6862      	ldr	r2, [r4, #4]
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	bf0c      	ite	eq
 8003d88:	6032      	streq	r2, [r6, #0]
 8003d8a:	605a      	strne	r2, [r3, #4]
 8003d8c:	e7ec      	b.n	8003d68 <_malloc_r+0xa0>
 8003d8e:	4623      	mov	r3, r4
 8003d90:	6864      	ldr	r4, [r4, #4]
 8003d92:	e7b2      	b.n	8003cfa <_malloc_r+0x32>
 8003d94:	4634      	mov	r4, r6
 8003d96:	6876      	ldr	r6, [r6, #4]
 8003d98:	e7b9      	b.n	8003d0e <_malloc_r+0x46>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	f000 f84c 	bl	8003e3c <__malloc_unlock>
 8003da4:	e7a1      	b.n	8003cea <_malloc_r+0x22>
 8003da6:	6025      	str	r5, [r4, #0]
 8003da8:	e7de      	b.n	8003d68 <_malloc_r+0xa0>
 8003daa:	bf00      	nop
 8003dac:	200001a8 	.word	0x200001a8

08003db0 <_realloc_r>:
 8003db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db4:	4680      	mov	r8, r0
 8003db6:	4614      	mov	r4, r2
 8003db8:	460e      	mov	r6, r1
 8003dba:	b921      	cbnz	r1, 8003dc6 <_realloc_r+0x16>
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc2:	f7ff bf81 	b.w	8003cc8 <_malloc_r>
 8003dc6:	b92a      	cbnz	r2, 8003dd4 <_realloc_r+0x24>
 8003dc8:	f7ff ff16 	bl	8003bf8 <_free_r>
 8003dcc:	4625      	mov	r5, r4
 8003dce:	4628      	mov	r0, r5
 8003dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd4:	f000 f838 	bl	8003e48 <_malloc_usable_size_r>
 8003dd8:	4284      	cmp	r4, r0
 8003dda:	4607      	mov	r7, r0
 8003ddc:	d802      	bhi.n	8003de4 <_realloc_r+0x34>
 8003dde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003de2:	d812      	bhi.n	8003e0a <_realloc_r+0x5a>
 8003de4:	4621      	mov	r1, r4
 8003de6:	4640      	mov	r0, r8
 8003de8:	f7ff ff6e 	bl	8003cc8 <_malloc_r>
 8003dec:	4605      	mov	r5, r0
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d0ed      	beq.n	8003dce <_realloc_r+0x1e>
 8003df2:	42bc      	cmp	r4, r7
 8003df4:	4622      	mov	r2, r4
 8003df6:	4631      	mov	r1, r6
 8003df8:	bf28      	it	cs
 8003dfa:	463a      	movcs	r2, r7
 8003dfc:	f7ff fed4 	bl	8003ba8 <memcpy>
 8003e00:	4631      	mov	r1, r6
 8003e02:	4640      	mov	r0, r8
 8003e04:	f7ff fef8 	bl	8003bf8 <_free_r>
 8003e08:	e7e1      	b.n	8003dce <_realloc_r+0x1e>
 8003e0a:	4635      	mov	r5, r6
 8003e0c:	e7df      	b.n	8003dce <_realloc_r+0x1e>
	...

08003e10 <_sbrk_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	2300      	movs	r3, #0
 8003e14:	4d05      	ldr	r5, [pc, #20]	; (8003e2c <_sbrk_r+0x1c>)
 8003e16:	4604      	mov	r4, r0
 8003e18:	4608      	mov	r0, r1
 8003e1a:	602b      	str	r3, [r5, #0]
 8003e1c:	f7fd f9b2 	bl	8001184 <_sbrk>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	d102      	bne.n	8003e2a <_sbrk_r+0x1a>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	b103      	cbz	r3, 8003e2a <_sbrk_r+0x1a>
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	200001b0 	.word	0x200001b0

08003e30 <__malloc_lock>:
 8003e30:	4801      	ldr	r0, [pc, #4]	; (8003e38 <__malloc_lock+0x8>)
 8003e32:	f000 b811 	b.w	8003e58 <__retarget_lock_acquire_recursive>
 8003e36:	bf00      	nop
 8003e38:	200001b4 	.word	0x200001b4

08003e3c <__malloc_unlock>:
 8003e3c:	4801      	ldr	r0, [pc, #4]	; (8003e44 <__malloc_unlock+0x8>)
 8003e3e:	f000 b80c 	b.w	8003e5a <__retarget_lock_release_recursive>
 8003e42:	bf00      	nop
 8003e44:	200001b4 	.word	0x200001b4

08003e48 <_malloc_usable_size_r>:
 8003e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e4c:	1f18      	subs	r0, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bfbc      	itt	lt
 8003e52:	580b      	ldrlt	r3, [r1, r0]
 8003e54:	18c0      	addlt	r0, r0, r3
 8003e56:	4770      	bx	lr

08003e58 <__retarget_lock_acquire_recursive>:
 8003e58:	4770      	bx	lr

08003e5a <__retarget_lock_release_recursive>:
 8003e5a:	4770      	bx	lr

08003e5c <_init>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr

08003e68 <_fini>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr
